// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=5148,HLS_SYN_LUT=8028}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        m_axi_memptr_AWVALID,
        m_axi_memptr_AWREADY,
        m_axi_memptr_AWADDR,
        m_axi_memptr_AWID,
        m_axi_memptr_AWLEN,
        m_axi_memptr_AWSIZE,
        m_axi_memptr_AWBURST,
        m_axi_memptr_AWLOCK,
        m_axi_memptr_AWCACHE,
        m_axi_memptr_AWPROT,
        m_axi_memptr_AWQOS,
        m_axi_memptr_AWREGION,
        m_axi_memptr_AWUSER,
        m_axi_memptr_WVALID,
        m_axi_memptr_WREADY,
        m_axi_memptr_WDATA,
        m_axi_memptr_WSTRB,
        m_axi_memptr_WLAST,
        m_axi_memptr_WID,
        m_axi_memptr_WUSER,
        m_axi_memptr_ARVALID,
        m_axi_memptr_ARREADY,
        m_axi_memptr_ARADDR,
        m_axi_memptr_ARID,
        m_axi_memptr_ARLEN,
        m_axi_memptr_ARSIZE,
        m_axi_memptr_ARBURST,
        m_axi_memptr_ARLOCK,
        m_axi_memptr_ARCACHE,
        m_axi_memptr_ARPROT,
        m_axi_memptr_ARQOS,
        m_axi_memptr_ARREGION,
        m_axi_memptr_ARUSER,
        m_axi_memptr_RVALID,
        m_axi_memptr_RREADY,
        m_axi_memptr_RDATA,
        m_axi_memptr_RLAST,
        m_axi_memptr_RID,
        m_axi_memptr_RUSER,
        m_axi_memptr_RRESP,
        m_axi_memptr_BVALID,
        m_axi_memptr_BREADY,
        m_axi_memptr_BRESP,
        m_axi_memptr_BID,
        m_axi_memptr_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt,
        s_axi_p0_AWVALID,
        s_axi_p0_AWREADY,
        s_axi_p0_AWADDR,
        s_axi_p0_WVALID,
        s_axi_p0_WREADY,
        s_axi_p0_WDATA,
        s_axi_p0_WSTRB,
        s_axi_p0_ARVALID,
        s_axi_p0_ARREADY,
        s_axi_p0_ARADDR,
        s_axi_p0_RVALID,
        s_axi_p0_RREADY,
        s_axi_p0_RDATA,
        s_axi_p0_RRESP,
        s_axi_p0_BVALID,
        s_axi_p0_BREADY,
        s_axi_p0_BRESP
);

parameter    ap_ST_fsm_state1 = 28'b1;
parameter    ap_ST_fsm_state2 = 28'b10;
parameter    ap_ST_fsm_state3 = 28'b100;
parameter    ap_ST_fsm_state4 = 28'b1000;
parameter    ap_ST_fsm_state5 = 28'b10000;
parameter    ap_ST_fsm_state6 = 28'b100000;
parameter    ap_ST_fsm_state7 = 28'b1000000;
parameter    ap_ST_fsm_state8 = 28'b10000000;
parameter    ap_ST_fsm_state9 = 28'b100000000;
parameter    ap_ST_fsm_pp0_stage0 = 28'b1000000000;
parameter    ap_ST_fsm_state13 = 28'b10000000000;
parameter    ap_ST_fsm_state14 = 28'b100000000000;
parameter    ap_ST_fsm_state15 = 28'b1000000000000;
parameter    ap_ST_fsm_state16 = 28'b10000000000000;
parameter    ap_ST_fsm_state17 = 28'b100000000000000;
parameter    ap_ST_fsm_state18 = 28'b1000000000000000;
parameter    ap_ST_fsm_state19 = 28'b10000000000000000;
parameter    ap_ST_fsm_state20 = 28'b100000000000000000;
parameter    ap_ST_fsm_state21 = 28'b1000000000000000000;
parameter    ap_ST_fsm_pp1_stage0 = 28'b10000000000000000000;
parameter    ap_ST_fsm_state25 = 28'b100000000000000000000;
parameter    ap_ST_fsm_state26 = 28'b1000000000000000000000;
parameter    ap_ST_fsm_pp2_stage0 = 28'b10000000000000000000000;
parameter    ap_ST_fsm_state30 = 28'b100000000000000000000000;
parameter    ap_ST_fsm_state31 = 28'b1000000000000000000000000;
parameter    ap_ST_fsm_state32 = 28'b10000000000000000000000000;
parameter    ap_ST_fsm_state33 = 28'b100000000000000000000000000;
parameter    ap_ST_fsm_state34 = 28'b1000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_P0_DATA_WIDTH = 32;
parameter    C_S_AXI_P0_ADDR_WIDTH = 6;
parameter    C_M_AXI_MEMPTR_ID_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEMPTR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMPTR_TARGET_ADDR = 0;
parameter    C_M_AXI_MEMPTR_USER_VALUE = 0;
parameter    C_M_AXI_MEMPTR_PROT_VALUE = 0;
parameter    C_M_AXI_MEMPTR_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_6A09E667 = 32'b1101010000010011110011001100111;
parameter    ap_const_lv32_BB67AE85 = 32'b10111011011001111010111010000101;
parameter    ap_const_lv32_3C6EF372 = 32'b111100011011101111001101110010;
parameter    ap_const_lv32_A54FF53A = 32'b10100101010011111111010100111010;
parameter    ap_const_lv32_510E527F = 32'b1010001000011100101001001111111;
parameter    ap_const_lv32_9B05688C = 32'b10011011000001010110100010001100;
parameter    ap_const_lv32_1F83D9AB = 32'b11111100000111101100110101011;
parameter    ap_const_lv32_5BE0CD19 = 32'b1011011111000001100110100011001;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_FFFFFFC0 = 32'b11111111111111111111111111000000;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_P0_WSTRB_WIDTH = (C_S_AXI_P0_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_MEMPTR_WSTRB_WIDTH = (C_M_AXI_MEMPTR_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_memptr_AWVALID;
input   m_axi_memptr_AWREADY;
output  [C_M_AXI_MEMPTR_ADDR_WIDTH - 1 : 0] m_axi_memptr_AWADDR;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_AWID;
output  [7:0] m_axi_memptr_AWLEN;
output  [2:0] m_axi_memptr_AWSIZE;
output  [1:0] m_axi_memptr_AWBURST;
output  [1:0] m_axi_memptr_AWLOCK;
output  [3:0] m_axi_memptr_AWCACHE;
output  [2:0] m_axi_memptr_AWPROT;
output  [3:0] m_axi_memptr_AWQOS;
output  [3:0] m_axi_memptr_AWREGION;
output  [C_M_AXI_MEMPTR_AWUSER_WIDTH - 1 : 0] m_axi_memptr_AWUSER;
output   m_axi_memptr_WVALID;
input   m_axi_memptr_WREADY;
output  [C_M_AXI_MEMPTR_DATA_WIDTH - 1 : 0] m_axi_memptr_WDATA;
output  [C_M_AXI_MEMPTR_WSTRB_WIDTH - 1 : 0] m_axi_memptr_WSTRB;
output   m_axi_memptr_WLAST;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_WID;
output  [C_M_AXI_MEMPTR_WUSER_WIDTH - 1 : 0] m_axi_memptr_WUSER;
output   m_axi_memptr_ARVALID;
input   m_axi_memptr_ARREADY;
output  [C_M_AXI_MEMPTR_ADDR_WIDTH - 1 : 0] m_axi_memptr_ARADDR;
output  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_ARID;
output  [7:0] m_axi_memptr_ARLEN;
output  [2:0] m_axi_memptr_ARSIZE;
output  [1:0] m_axi_memptr_ARBURST;
output  [1:0] m_axi_memptr_ARLOCK;
output  [3:0] m_axi_memptr_ARCACHE;
output  [2:0] m_axi_memptr_ARPROT;
output  [3:0] m_axi_memptr_ARQOS;
output  [3:0] m_axi_memptr_ARREGION;
output  [C_M_AXI_MEMPTR_ARUSER_WIDTH - 1 : 0] m_axi_memptr_ARUSER;
input   m_axi_memptr_RVALID;
output   m_axi_memptr_RREADY;
input  [C_M_AXI_MEMPTR_DATA_WIDTH - 1 : 0] m_axi_memptr_RDATA;
input   m_axi_memptr_RLAST;
input  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_RID;
input  [C_M_AXI_MEMPTR_RUSER_WIDTH - 1 : 0] m_axi_memptr_RUSER;
input  [1:0] m_axi_memptr_RRESP;
input   m_axi_memptr_BVALID;
output   m_axi_memptr_BREADY;
input  [1:0] m_axi_memptr_BRESP;
input  [C_M_AXI_MEMPTR_ID_WIDTH - 1 : 0] m_axi_memptr_BID;
input  [C_M_AXI_MEMPTR_BUSER_WIDTH - 1 : 0] m_axi_memptr_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;
input   s_axi_p0_AWVALID;
output   s_axi_p0_AWREADY;
input  [C_S_AXI_P0_ADDR_WIDTH - 1 : 0] s_axi_p0_AWADDR;
input   s_axi_p0_WVALID;
output   s_axi_p0_WREADY;
input  [C_S_AXI_P0_DATA_WIDTH - 1 : 0] s_axi_p0_WDATA;
input  [C_S_AXI_P0_WSTRB_WIDTH - 1 : 0] s_axi_p0_WSTRB;
input   s_axi_p0_ARVALID;
output   s_axi_p0_ARREADY;
input  [C_S_AXI_P0_ADDR_WIDTH - 1 : 0] s_axi_p0_ARADDR;
output   s_axi_p0_RVALID;
input   s_axi_p0_RREADY;
output  [C_S_AXI_P0_DATA_WIDTH - 1 : 0] s_axi_p0_RDATA;
output  [1:0] s_axi_p0_RRESP;
output   s_axi_p0_BVALID;
input   s_axi_p0_BREADY;
output  [1:0] s_axi_p0_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] base_addr;
wire   [31:0] bytes;
wire   [31:0] hash;
reg    memptr_blk_n_AR;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state15;
reg    memptr_blk_n_R;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_878;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond2_reg_887;
reg    memptr_blk_n_AW;
wire   [0:0] ap_CS_fsm_state26;
reg    memptr_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond1_reg_951;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond1_reg_951;
reg    memptr_blk_n_B;
wire   [0:0] ap_CS_fsm_state34;
reg    memptr_AWVALID;
wire    memptr_AWREADY;
reg    memptr_WVALID;
wire    memptr_WREADY;
reg    memptr_ARVALID;
wire    memptr_ARREADY;
reg   [31:0] memptr_ARLEN;
wire    memptr_RVALID;
reg    memptr_RREADY;
wire   [7:0] memptr_RDATA;
wire    memptr_RLAST;
wire   [0:0] memptr_RID;
wire   [0:0] memptr_RUSER;
wire   [1:0] memptr_RRESP;
wire    memptr_BVALID;
reg    memptr_BREADY;
wire   [1:0] memptr_BRESP;
wire   [0:0] memptr_BID;
wire   [0:0] memptr_BUSER;
reg   [6:0] indvar_reg_249;
reg   [6:0] ap_pipeline_reg_pp0_iter1_indvar_reg_249;
reg   [31:0] indvar9_reg_261;
reg   [31:0] ap_pipeline_reg_pp1_iter1_indvar9_reg_261;
reg   [5:0] indvar1_reg_273;
reg   [31:0] reg_481;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_624_p2;
wire   [0:0] ap_CS_fsm_state13;
reg   [31:0] reg_487;
reg   [31:0] reg_493;
reg   [31:0] reg_499;
reg   [31:0] reg_505;
reg   [31:0] reg_511;
reg   [31:0] reg_517;
reg   [31:0] reg_523;
reg   [31:0] reg_529;
reg   [31:0] reg_535;
reg   [31:0] reg_541;
reg   [7:0] reg_547;
reg   [31:0] hash_read_reg_842;
wire   [32:0] tmp_cast_fu_552_p1;
reg   [32:0] tmp_cast_reg_847;
reg   [31:0] n_load_reg_852;
wire   [0:0] icmp_fu_640_p2;
reg   [0:0] icmp_reg_863;
reg   [31:0] memptr_addr_1_reg_867;
reg   [31:0] memptr_addr_reg_873;
wire   [0:0] exitcond_fu_674_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_878;
wire   [6:0] indvar_next_fu_680_p2;
reg   [6:0] indvar_next_reg_882;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond2_fu_712_p2;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond2_reg_887;
wire   [31:0] indvar_next2_fu_717_p2;
reg   [31:0] indvar_next2_reg_891;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] sha256ctx_datalen_lo_1_reg_896;
wire   [0:0] ap_CS_fsm_state25;
reg   [31:0] sha256ctx_bitlen_0_1_reg_901;
reg   [31:0] sha256ctx_bitlen_1_1_reg_906;
reg   [31:0] sha256ctx_state_0_2_2_reg_911;
reg   [31:0] sha256ctx_state_1_2_2_reg_916;
reg   [31:0] sha256ctx_state_2_2_2_reg_921;
reg   [31:0] sha256ctx_state_3_2_2_reg_926;
reg   [31:0] sha256ctx_state_4_2_2_reg_931;
reg   [31:0] sha256ctx_state_5_2_2_reg_936;
reg   [31:0] sha256ctx_state_6_2_2_reg_941;
reg   [31:0] sha256ctx_state_7_2_2_reg_946;
wire   [0:0] exitcond1_fu_733_p2;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_sig_ioackin_memptr_WREADY;
wire   [5:0] indvar_next1_fu_739_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] FPGAbuf_q0;
reg   [7:0] FPGAbuf_load_reg_965;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] ap_CS_fsm_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] ap_CS_fsm_state21;
reg    ap_enable_reg_pp1_iter2;
reg    ap_sig_ioackin_memptr_AWREADY;
wire    grp_sha256_final_fu_284_ap_done;
reg   [5:0] FPGAbuf_address0;
reg    FPGAbuf_ce0;
reg    FPGAbuf_we0;
reg   [7:0] FPGAbuf_d0;
reg    FPGAbuf_ce1;
reg    FPGAbuf_we1;
reg   [5:0] sha256ctx_data_address0;
reg    sha256ctx_data_ce0;
reg    sha256ctx_data_we0;
reg   [7:0] sha256ctx_data_d0;
wire   [7:0] sha256ctx_data_q0;
reg   [5:0] sha256ctx_data_address1;
reg    sha256ctx_data_ce1;
reg    sha256ctx_data_we1;
wire   [7:0] sha256ctx_data_q1;
wire    grp_sha256_final_fu_284_ap_start;
wire    grp_sha256_final_fu_284_ap_idle;
wire    grp_sha256_final_fu_284_ap_ready;
wire   [5:0] grp_sha256_final_fu_284_ctx_data_address0;
wire    grp_sha256_final_fu_284_ctx_data_ce0;
wire    grp_sha256_final_fu_284_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_284_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_284_ctx_data_address1;
wire    grp_sha256_final_fu_284_ctx_data_ce1;
wire    grp_sha256_final_fu_284_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_284_ctx_data_d1;
wire   [5:0] grp_sha256_final_fu_284_hash_address0;
wire    grp_sha256_final_fu_284_hash_ce0;
wire    grp_sha256_final_fu_284_hash_we0;
wire   [7:0] grp_sha256_final_fu_284_hash_d0;
wire   [5:0] grp_sha256_final_fu_284_hash_address1;
wire    grp_sha256_final_fu_284_hash_ce1;
wire    grp_sha256_final_fu_284_hash_we1;
wire   [7:0] grp_sha256_final_fu_284_hash_d1;
wire    grp_sha256_update_fu_303_ap_start;
wire    grp_sha256_update_fu_303_ap_done;
wire    grp_sha256_update_fu_303_ap_idle;
wire    grp_sha256_update_fu_303_ap_ready;
wire   [5:0] grp_sha256_update_fu_303_ctx_data_address0;
wire    grp_sha256_update_fu_303_ctx_data_ce0;
wire    grp_sha256_update_fu_303_ctx_data_we0;
wire   [7:0] grp_sha256_update_fu_303_ctx_data_d0;
wire   [5:0] grp_sha256_update_fu_303_ctx_data_address1;
wire    grp_sha256_update_fu_303_ctx_data_ce1;
reg   [31:0] grp_sha256_update_fu_303_ctx_datalen_read;
reg   [31:0] grp_sha256_update_fu_303_p_read1;
reg   [31:0] grp_sha256_update_fu_303_p_read2;
reg   [31:0] grp_sha256_update_fu_303_p_read3;
reg   [31:0] grp_sha256_update_fu_303_p_read4;
reg   [31:0] grp_sha256_update_fu_303_p_read5;
reg   [31:0] grp_sha256_update_fu_303_p_read6;
reg   [31:0] grp_sha256_update_fu_303_p_read7;
reg   [31:0] grp_sha256_update_fu_303_p_read8;
reg   [31:0] grp_sha256_update_fu_303_p_read9;
reg   [31:0] grp_sha256_update_fu_303_p_read10;
wire   [5:0] grp_sha256_update_fu_303_data_address0;
wire    grp_sha256_update_fu_303_data_ce0;
reg   [31:0] grp_sha256_update_fu_303_len;
wire   [31:0] grp_sha256_update_fu_303_ap_return_0;
wire   [31:0] grp_sha256_update_fu_303_ap_return_1;
wire   [31:0] grp_sha256_update_fu_303_ap_return_2;
wire   [31:0] grp_sha256_update_fu_303_ap_return_3;
wire   [31:0] grp_sha256_update_fu_303_ap_return_4;
wire   [31:0] grp_sha256_update_fu_303_ap_return_5;
wire   [31:0] grp_sha256_update_fu_303_ap_return_6;
wire   [31:0] grp_sha256_update_fu_303_ap_return_7;
wire   [31:0] grp_sha256_update_fu_303_ap_return_8;
wire   [31:0] grp_sha256_update_fu_303_ap_return_9;
wire   [31:0] grp_sha256_update_fu_303_ap_return_10;
reg   [6:0] indvar_phi_fu_253_p4;
reg   [31:0] indvar9_phi_fu_265_p4;
reg    ap_reg_grp_sha256_final_fu_284_ap_start;
reg    ap_reg_grp_sha256_update_fu_303_ap_start;
wire   [0:0] ap_CS_fsm_state14;
wire   [63:0] tmp_117_fu_686_p1;
wire   [63:0] tmp_116_fu_723_p1;
wire   [63:0] tmp_115_fu_745_p1;
wire   [63:0] p_sum1_cast_fu_655_p1;
wire   [63:0] tmp_114_fu_665_p1;
reg    ap_reg_ioackin_memptr_ARREADY;
reg    ap_sig_ioackin_memptr_ARREADY;
reg    ap_reg_ioackin_memptr_AWREADY;
reg    ap_reg_ioackin_memptr_WREADY;
reg   [31:0] n_fu_128;
wire   [31:0] n_1_fu_691_p2;
reg   [31:0] sha256ctx_datalen_fu_132;
reg   [31:0] sha256ctx_bitlen_0_2_fu_136;
reg   [31:0] sha256ctx_bitlen_1_2_fu_140;
reg   [31:0] sha256ctx_state_0_2_fu_144;
reg   [31:0] sha256ctx_state_1_2_fu_148;
reg   [31:0] sha256ctx_state_2_2_fu_152;
reg   [31:0] sha256ctx_state_3_2_fu_156;
reg   [31:0] sha256ctx_state_4_2_fu_160;
reg   [31:0] sha256ctx_state_5_2_fu_164;
reg   [31:0] sha256ctx_state_6_2_fu_168;
reg   [31:0] sha256ctx_state_7_2_fu_172;
reg   [31:0] offset_fu_176;
wire   [31:0] offset_1_fu_701_p2;
wire   [25:0] tmp_fu_630_p4;
wire   [32:0] tmp_143_cast_fu_646_p1;
wire   [32:0] p_sum1_fu_650_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_condition_437;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_grp_sha256_final_fu_284_ap_start = 1'b0;
#0 ap_reg_grp_sha256_update_fu_303_ap_start = 1'b0;
#0 ap_reg_ioackin_memptr_ARREADY = 1'b0;
#0 ap_reg_ioackin_memptr_AWREADY = 1'b0;
#0 ap_reg_ioackin_memptr_WREADY = 1'b0;
end

sha256_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

sha256_p0_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_P0_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_P0_DATA_WIDTH ))
sha256_p0_s_axi_U(
    .AWVALID(s_axi_p0_AWVALID),
    .AWREADY(s_axi_p0_AWREADY),
    .AWADDR(s_axi_p0_AWADDR),
    .WVALID(s_axi_p0_WVALID),
    .WREADY(s_axi_p0_WREADY),
    .WDATA(s_axi_p0_WDATA),
    .WSTRB(s_axi_p0_WSTRB),
    .ARVALID(s_axi_p0_ARVALID),
    .ARREADY(s_axi_p0_ARREADY),
    .ARADDR(s_axi_p0_ARADDR),
    .RVALID(s_axi_p0_RVALID),
    .RREADY(s_axi_p0_RREADY),
    .RDATA(s_axi_p0_RDATA),
    .RRESP(s_axi_p0_RRESP),
    .BVALID(s_axi_p0_BVALID),
    .BREADY(s_axi_p0_BREADY),
    .BRESP(s_axi_p0_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .base_addr(base_addr),
    .bytes(bytes),
    .hash(hash)
);

sha256_memptr_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEMPTR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEMPTR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEMPTR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEMPTR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEMPTR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEMPTR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEMPTR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEMPTR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEMPTR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEMPTR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEMPTR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEMPTR_CACHE_VALUE ))
sha256_memptr_m_axi_U(
    .AWVALID(m_axi_memptr_AWVALID),
    .AWREADY(m_axi_memptr_AWREADY),
    .AWADDR(m_axi_memptr_AWADDR),
    .AWID(m_axi_memptr_AWID),
    .AWLEN(m_axi_memptr_AWLEN),
    .AWSIZE(m_axi_memptr_AWSIZE),
    .AWBURST(m_axi_memptr_AWBURST),
    .AWLOCK(m_axi_memptr_AWLOCK),
    .AWCACHE(m_axi_memptr_AWCACHE),
    .AWPROT(m_axi_memptr_AWPROT),
    .AWQOS(m_axi_memptr_AWQOS),
    .AWREGION(m_axi_memptr_AWREGION),
    .AWUSER(m_axi_memptr_AWUSER),
    .WVALID(m_axi_memptr_WVALID),
    .WREADY(m_axi_memptr_WREADY),
    .WDATA(m_axi_memptr_WDATA),
    .WSTRB(m_axi_memptr_WSTRB),
    .WLAST(m_axi_memptr_WLAST),
    .WID(m_axi_memptr_WID),
    .WUSER(m_axi_memptr_WUSER),
    .ARVALID(m_axi_memptr_ARVALID),
    .ARREADY(m_axi_memptr_ARREADY),
    .ARADDR(m_axi_memptr_ARADDR),
    .ARID(m_axi_memptr_ARID),
    .ARLEN(m_axi_memptr_ARLEN),
    .ARSIZE(m_axi_memptr_ARSIZE),
    .ARBURST(m_axi_memptr_ARBURST),
    .ARLOCK(m_axi_memptr_ARLOCK),
    .ARCACHE(m_axi_memptr_ARCACHE),
    .ARPROT(m_axi_memptr_ARPROT),
    .ARQOS(m_axi_memptr_ARQOS),
    .ARREGION(m_axi_memptr_ARREGION),
    .ARUSER(m_axi_memptr_ARUSER),
    .RVALID(m_axi_memptr_RVALID),
    .RREADY(m_axi_memptr_RREADY),
    .RDATA(m_axi_memptr_RDATA),
    .RLAST(m_axi_memptr_RLAST),
    .RID(m_axi_memptr_RID),
    .RUSER(m_axi_memptr_RUSER),
    .RRESP(m_axi_memptr_RRESP),
    .BVALID(m_axi_memptr_BVALID),
    .BREADY(m_axi_memptr_BREADY),
    .BRESP(m_axi_memptr_BRESP),
    .BID(m_axi_memptr_BID),
    .BUSER(m_axi_memptr_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(memptr_ARVALID),
    .I_ARREADY(memptr_ARREADY),
    .I_ARADDR(memptr_addr_1_reg_867),
    .I_ARID(1'b0),
    .I_ARLEN(memptr_ARLEN),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(memptr_RVALID),
    .I_RREADY(memptr_RREADY),
    .I_RDATA(memptr_RDATA),
    .I_RID(memptr_RID),
    .I_RUSER(memptr_RUSER),
    .I_RRESP(memptr_RRESP),
    .I_RLAST(memptr_RLAST),
    .I_AWVALID(memptr_AWVALID),
    .I_AWREADY(memptr_AWREADY),
    .I_AWADDR(memptr_addr_reg_873),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_20),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(memptr_WVALID),
    .I_WREADY(memptr_WREADY),
    .I_WDATA(FPGAbuf_load_reg_965),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b1),
    .I_BVALID(memptr_BVALID),
    .I_BREADY(memptr_BREADY),
    .I_BRESP(memptr_BRESP),
    .I_BID(memptr_BID),
    .I_BUSER(memptr_BUSER)
);

sha256_FPGAbuf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
FPGAbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FPGAbuf_address0),
    .ce0(FPGAbuf_ce0),
    .we0(FPGAbuf_we0),
    .d0(FPGAbuf_d0),
    .q0(FPGAbuf_q0),
    .address1(grp_sha256_final_fu_284_hash_address1),
    .ce1(FPGAbuf_ce1),
    .we1(FPGAbuf_we1),
    .d1(grp_sha256_final_fu_284_hash_d1)
);

sha256_sha256ctx_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sha256ctx_data_address0),
    .ce0(sha256ctx_data_ce0),
    .we0(sha256ctx_data_we0),
    .d0(sha256ctx_data_d0),
    .q0(sha256ctx_data_q0),
    .address1(sha256ctx_data_address1),
    .ce1(sha256ctx_data_ce1),
    .we1(sha256ctx_data_we1),
    .d1(grp_sha256_final_fu_284_ctx_data_d1),
    .q1(sha256ctx_data_q1)
);

sha256_final grp_sha256_final_fu_284(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_284_ap_start),
    .ap_done(grp_sha256_final_fu_284_ap_done),
    .ap_idle(grp_sha256_final_fu_284_ap_idle),
    .ap_ready(grp_sha256_final_fu_284_ap_ready),
    .ctx_data_address0(grp_sha256_final_fu_284_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_284_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_284_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_284_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_284_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_284_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_284_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_284_ctx_data_d1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(reg_481),
    .ctx_bitlen_0_read(reg_487),
    .p_read3(reg_493),
    .p_read1(reg_499),
    .p_read2(reg_505),
    .p_read4(reg_511),
    .p_read5(reg_517),
    .p_read6(reg_523),
    .p_read7(reg_529),
    .p_read8(reg_535),
    .p_read9(reg_541),
    .hash_address0(grp_sha256_final_fu_284_hash_address0),
    .hash_ce0(grp_sha256_final_fu_284_hash_ce0),
    .hash_we0(grp_sha256_final_fu_284_hash_we0),
    .hash_d0(grp_sha256_final_fu_284_hash_d0),
    .hash_address1(grp_sha256_final_fu_284_hash_address1),
    .hash_ce1(grp_sha256_final_fu_284_hash_ce1),
    .hash_we1(grp_sha256_final_fu_284_hash_we1),
    .hash_d1(grp_sha256_final_fu_284_hash_d1)
);

sha256_update grp_sha256_update_fu_303(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_update_fu_303_ap_start),
    .ap_done(grp_sha256_update_fu_303_ap_done),
    .ap_idle(grp_sha256_update_fu_303_ap_idle),
    .ap_ready(grp_sha256_update_fu_303_ap_ready),
    .ctx_data_address0(grp_sha256_update_fu_303_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_update_fu_303_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_update_fu_303_ctx_data_we0),
    .ctx_data_d0(grp_sha256_update_fu_303_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_update_fu_303_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_update_fu_303_ctx_data_ce1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(grp_sha256_update_fu_303_ctx_datalen_read),
    .p_read1(grp_sha256_update_fu_303_p_read1),
    .p_read2(grp_sha256_update_fu_303_p_read2),
    .p_read3(grp_sha256_update_fu_303_p_read3),
    .p_read4(grp_sha256_update_fu_303_p_read4),
    .p_read5(grp_sha256_update_fu_303_p_read5),
    .p_read6(grp_sha256_update_fu_303_p_read6),
    .p_read7(grp_sha256_update_fu_303_p_read7),
    .p_read8(grp_sha256_update_fu_303_p_read8),
    .p_read9(grp_sha256_update_fu_303_p_read9),
    .p_read10(grp_sha256_update_fu_303_p_read10),
    .data_address0(grp_sha256_update_fu_303_data_address0),
    .data_ce0(grp_sha256_update_fu_303_data_ce0),
    .data_q0(FPGAbuf_q0),
    .len(grp_sha256_update_fu_303_len),
    .ap_return_0(grp_sha256_update_fu_303_ap_return_0),
    .ap_return_1(grp_sha256_update_fu_303_ap_return_1),
    .ap_return_2(grp_sha256_update_fu_303_ap_return_2),
    .ap_return_3(grp_sha256_update_fu_303_ap_return_3),
    .ap_return_4(grp_sha256_update_fu_303_ap_return_4),
    .ap_return_5(grp_sha256_update_fu_303_ap_return_5),
    .ap_return_6(grp_sha256_update_fu_303_ap_return_6),
    .ap_return_7(grp_sha256_update_fu_303_ap_return_7),
    .ap_return_8(grp_sha256_update_fu_303_ap_return_8),
    .ap_return_9(grp_sha256_update_fu_303_ap_return_9),
    .ap_return_10(grp_sha256_update_fu_303_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_674_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond_fu_674_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond_fu_674_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond2_fu_712_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b0 == exitcond2_fu_712_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & ~(1'b0 == exitcond2_fu_712_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond1_fu_733_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done)))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b0 == exitcond1_fu_733_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done))) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b0 == exitcond1_fu_733_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done)))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_final_fu_284_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_s_fu_624_p2))) begin
            ap_reg_grp_sha256_final_fu_284_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_final_fu_284_ap_ready)) begin
            ap_reg_grp_sha256_final_fu_284_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_update_fu_303_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25))) begin
            ap_reg_grp_sha256_update_fu_303_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_update_fu_303_ap_ready)) begin
            ap_reg_grp_sha256_update_fu_303_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == ap_sig_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == ap_sig_ioackin_memptr_ARREADY)))) begin
            ap_reg_ioackin_memptr_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == memptr_ARREADY)))) begin
            ap_reg_ioackin_memptr_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            if (~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done))) begin
                ap_reg_ioackin_memptr_AWREADY <= 1'b0;
            end else if (((1'b1 == memptr_AWREADY) & ~(1'b0 == grp_sha256_final_fu_284_ap_done))) begin
                ap_reg_ioackin_memptr_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_memptr_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951))) begin
            if ((ap_condition_437 == 1'b1)) begin
                ap_reg_ioackin_memptr_WREADY <= 1'b0;
            end else if ((1'b1 == memptr_WREADY)) begin
                ap_reg_ioackin_memptr_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond1_fu_733_p2))) begin
        indvar1_reg_273 <= indvar_next1_fu_739_p2;
    end else if (((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done)))) begin
        indvar1_reg_273 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        indvar9_reg_261 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)))) begin
        indvar9_reg_261 <= indvar_next2_reg_891;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_reg_249 <= ap_const_lv7_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)))) begin
        indvar_reg_249 <= indvar_next_reg_882;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        n_fu_128 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        n_fu_128 <= n_1_fu_691_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        n_fu_128 <= bytes;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done))))) begin
        offset_fu_176 <= offset_1_fu_701_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        offset_fu_176 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_bitlen_0_2_fu_136 <= grp_sha256_update_fu_303_ap_return_1;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_bitlen_0_2_fu_136 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_bitlen_1_2_fu_140 <= grp_sha256_update_fu_303_ap_return_2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_bitlen_1_2_fu_140 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_datalen_fu_132 <= grp_sha256_update_fu_303_ap_return_0;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_datalen_fu_132 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_0_2_fu_144 <= grp_sha256_update_fu_303_ap_return_3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_0_2_fu_144 <= ap_const_lv32_6A09E667;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_1_2_fu_148 <= grp_sha256_update_fu_303_ap_return_4;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_1_2_fu_148 <= ap_const_lv32_BB67AE85;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_2_2_fu_152 <= grp_sha256_update_fu_303_ap_return_5;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_2_2_fu_152 <= ap_const_lv32_3C6EF372;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_3_2_fu_156 <= grp_sha256_update_fu_303_ap_return_6;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_3_2_fu_156 <= ap_const_lv32_A54FF53A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_4_2_fu_160 <= grp_sha256_update_fu_303_ap_return_7;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_4_2_fu_160 <= ap_const_lv32_510E527F;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_5_2_fu_164 <= grp_sha256_update_fu_303_ap_return_8;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_5_2_fu_164 <= ap_const_lv32_9B05688C;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_6_2_fu_168 <= grp_sha256_update_fu_303_ap_return_9;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_6_2_fu_168 <= ap_const_lv32_1F83D9AB;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863) & ~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))))) begin
        sha256ctx_state_7_2_fu_172 <= grp_sha256_update_fu_303_ap_return_10;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_7_2_fu_172 <= ap_const_lv32_5BE0CD19;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond1_reg_951))) begin
        FPGAbuf_load_reg_965 <= FPGAbuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_878 <= exitcond_reg_878;
        ap_pipeline_reg_pp0_iter1_indvar_reg_249 <= indvar_reg_249;
        exitcond_reg_878 <= exitcond_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp1_iter1_exitcond2_reg_887 <= exitcond2_reg_887;
        ap_pipeline_reg_pp1_iter1_indvar9_reg_261 <= indvar9_reg_261;
        exitcond2_reg_887 <= exitcond2_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)))) begin
        ap_pipeline_reg_pp2_iter1_exitcond1_reg_951 <= exitcond1_reg_951;
        exitcond1_reg_951 <= exitcond1_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        hash_read_reg_842 <= hash;
        tmp_cast_reg_847[31 : 0] <= tmp_cast_fu_552_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_s_fu_624_p2))) begin
        icmp_reg_863 <= icmp_fu_640_p2;
        memptr_addr_1_reg_867 <= p_sum1_cast_fu_655_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        indvar_next2_reg_891 <= indvar_next2_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next_reg_882 <= indvar_next_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_s_fu_624_p2))) begin
        memptr_addr_reg_873 <= tmp_114_fu_665_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_load_reg_852 <= n_fu_128;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_s_fu_624_p2)) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_481 <= sha256ctx_datalen_fu_132;
        reg_487 <= sha256ctx_bitlen_0_2_fu_136;
        reg_493 <= sha256ctx_bitlen_1_2_fu_140;
        reg_499 <= sha256ctx_state_0_2_fu_144;
        reg_505 <= sha256ctx_state_1_2_fu_148;
        reg_511 <= sha256ctx_state_2_2_fu_152;
        reg_517 <= sha256ctx_state_3_2_fu_156;
        reg_523 <= sha256ctx_state_4_2_fu_160;
        reg_529 <= sha256ctx_state_5_2_fu_164;
        reg_535 <= sha256ctx_state_6_2_fu_168;
        reg_541 <= sha256ctx_state_7_2_fu_172;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0))))) begin
        reg_547 <= memptr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sha256ctx_bitlen_0_1_reg_901 <= sha256ctx_bitlen_0_2_fu_136;
        sha256ctx_bitlen_1_1_reg_906 <= sha256ctx_bitlen_1_2_fu_140;
        sha256ctx_datalen_lo_1_reg_896 <= sha256ctx_datalen_fu_132;
        sha256ctx_state_0_2_2_reg_911 <= sha256ctx_state_0_2_fu_144;
        sha256ctx_state_1_2_2_reg_916 <= sha256ctx_state_1_2_fu_148;
        sha256ctx_state_2_2_2_reg_921 <= sha256ctx_state_2_2_fu_152;
        sha256ctx_state_3_2_2_reg_926 <= sha256ctx_state_3_2_fu_156;
        sha256ctx_state_4_2_2_reg_931 <= sha256ctx_state_4_2_fu_160;
        sha256ctx_state_5_2_2_reg_936 <= sha256ctx_state_5_2_fu_164;
        sha256ctx_state_6_2_2_reg_941 <= sha256ctx_state_6_2_fu_168;
        sha256ctx_state_7_2_2_reg_946 <= sha256ctx_state_7_2_fu_172;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        FPGAbuf_address0 = tmp_115_fu_745_p1;
    end else if ((1'b1 == ap_enable_reg_pp1_iter2)) begin
        FPGAbuf_address0 = tmp_116_fu_723_p1;
    end else if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        FPGAbuf_address0 = tmp_117_fu_686_p1;
    end else if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        FPGAbuf_address0 = grp_sha256_update_fu_303_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_address0 = grp_sha256_final_fu_284_hash_address0;
    end else begin
        FPGAbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2)))) begin
        FPGAbuf_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        FPGAbuf_ce0 = grp_sha256_update_fu_303_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_ce0 = grp_sha256_final_fu_284_hash_ce0;
    end else begin
        FPGAbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_ce1 = grp_sha256_final_fu_284_hash_ce1;
    end else begin
        FPGAbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) | (1'b1 == ap_enable_reg_pp1_iter2))) begin
        FPGAbuf_d0 = reg_547;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_d0 = grp_sha256_final_fu_284_hash_d0;
    end else begin
        FPGAbuf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_878)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond2_reg_887)))) begin
        FPGAbuf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_we0 = grp_sha256_final_fu_284_hash_we0;
    end else begin
        FPGAbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        FPGAbuf_we1 = grp_sha256_final_fu_284_hash_we1;
    end else begin
        FPGAbuf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(memptr_BVALID == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(memptr_BVALID == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_ARREADY)) begin
        ap_sig_ioackin_memptr_ARREADY = memptr_ARREADY;
    end else begin
        ap_sig_ioackin_memptr_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_AWREADY)) begin
        ap_sig_ioackin_memptr_AWREADY = memptr_AWREADY;
    end else begin
        ap_sig_ioackin_memptr_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_WREADY)) begin
        ap_sig_ioackin_memptr_WREADY = memptr_WREADY;
    end else begin
        ap_sig_ioackin_memptr_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_ctx_datalen_read = sha256ctx_datalen_lo_1_reg_896;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_ctx_datalen_read = reg_481;
        end else begin
            grp_sha256_update_fu_303_ctx_datalen_read = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_ctx_datalen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_len = n_load_reg_852;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_len = ap_const_lv32_40;
        end else begin
            grp_sha256_update_fu_303_len = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_len = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read1 = sha256ctx_bitlen_0_1_reg_901;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read1 = reg_487;
        end else begin
            grp_sha256_update_fu_303_p_read1 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read10 = sha256ctx_state_7_2_2_reg_946;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read10 = reg_541;
        end else begin
            grp_sha256_update_fu_303_p_read10 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read2 = sha256ctx_bitlen_1_1_reg_906;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read2 = reg_493;
        end else begin
            grp_sha256_update_fu_303_p_read2 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read3 = sha256ctx_state_0_2_2_reg_911;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read3 = reg_499;
        end else begin
            grp_sha256_update_fu_303_p_read3 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read4 = sha256ctx_state_1_2_2_reg_916;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read4 = reg_505;
        end else begin
            grp_sha256_update_fu_303_p_read4 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read5 = sha256ctx_state_2_2_2_reg_921;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read5 = reg_511;
        end else begin
            grp_sha256_update_fu_303_p_read5 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read6 = sha256ctx_state_3_2_2_reg_926;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read6 = reg_517;
        end else begin
            grp_sha256_update_fu_303_p_read6 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read7 = sha256ctx_state_4_2_2_reg_931;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read7 = reg_523;
        end else begin
            grp_sha256_update_fu_303_p_read7 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read8 = sha256ctx_state_5_2_2_reg_936;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read8 = reg_529;
        end else begin
            grp_sha256_update_fu_303_p_read8 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (~(1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read9 = sha256ctx_state_6_2_2_reg_941;
        end else if ((1'b0 == icmp_reg_863)) begin
            grp_sha256_update_fu_303_p_read9 = reg_535;
        end else begin
            grp_sha256_update_fu_303_p_read9 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_303_p_read9 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887))) begin
        indvar9_phi_fu_265_p4 = indvar_next2_reg_891;
    end else begin
        indvar9_phi_fu_265_p4 = indvar9_reg_261;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0))) begin
        indvar_phi_fu_253_p4 = indvar_next_reg_882;
    end else begin
        indvar_phi_fu_253_p4 = indvar_reg_249;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_memptr_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            memptr_ARLEN = n_load_reg_852;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            memptr_ARLEN = ap_const_lv32_40;
        end else begin
            memptr_ARLEN = 'bx;
        end
    end else begin
        memptr_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_reg_ioackin_memptr_ARREADY)))) begin
        memptr_ARVALID = 1'b1;
    end else begin
        memptr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == grp_sha256_final_fu_284_ap_done) & (1'b0 == ap_reg_ioackin_memptr_AWREADY))) begin
        memptr_AWVALID = 1'b1;
    end else begin
        memptr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(memptr_BVALID == 1'b0))) begin
        memptr_BREADY = 1'b1;
    end else begin
        memptr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0))))) begin
        memptr_RREADY = 1'b1;
    end else begin
        memptr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_reg_ioackin_memptr_WREADY))) begin
        memptr_WVALID = 1'b1;
    end else begin
        memptr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        memptr_blk_n_AR = m_axi_memptr_ARREADY;
    end else begin
        memptr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        memptr_blk_n_AW = m_axi_memptr_AWREADY;
    end else begin
        memptr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        memptr_blk_n_B = m_axi_memptr_BVALID;
    end else begin
        memptr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887)))) begin
        memptr_blk_n_R = m_axi_memptr_RVALID;
    end else begin
        memptr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951))) begin
        memptr_blk_n_W = m_axi_memptr_WREADY;
    end else begin
        memptr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_address0 = grp_sha256_update_fu_303_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_address0 = grp_sha256_final_fu_284_ctx_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_address1 = grp_sha256_update_fu_303_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_address1 = grp_sha256_final_fu_284_ctx_data_address1;
    end else begin
        sha256ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_ce0 = grp_sha256_update_fu_303_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_ce0 = grp_sha256_final_fu_284_ctx_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_ce1 = grp_sha256_update_fu_303_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_ce1 = grp_sha256_final_fu_284_ctx_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_d0 = grp_sha256_update_fu_303_ctx_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_d0 = grp_sha256_final_fu_284_ctx_data_d0;
    end else begin
        sha256ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == icmp_reg_863)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == icmp_reg_863)))) begin
        sha256ctx_data_we0 = grp_sha256_update_fu_303_ctx_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_we0 = grp_sha256_final_fu_284_ctx_data_we0;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sha256ctx_data_we1 = grp_sha256_final_fu_284_ctx_data_we1;
    end else begin
        sha256ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == tmp_s_fu_624_p2) & ~(1'b0 == icmp_fu_640_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b0 == tmp_s_fu_624_p2) & (1'b0 == icmp_fu_640_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == ap_sig_ioackin_memptr_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_674_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_878 == 1'b0) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_674_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (~(((1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)) | (~(1'b0 == icmp_reg_863) & (1'b0 == grp_sha256_update_fu_303_ap_done)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == ap_sig_ioackin_memptr_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) & ~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond2_fu_712_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_887) & (memptr_RVALID == 1'b0)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond2_fu_712_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state26 : begin
            if (~((1'b0 == ap_sig_ioackin_memptr_AWREADY) | (1'b0 == grp_sha256_final_fu_284_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) & ~(~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond1_fu_733_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) | (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond1_fu_733_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (~(memptr_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_437 = ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_pipeline_reg_pp2_iter1_exitcond1_reg_951) & (1'b0 == ap_sig_ioackin_memptr_WREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_733_p2 = ((indvar1_reg_273 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond2_fu_712_p2 = ((indvar9_phi_fu_265_p4 == n_load_reg_852) ? 1'b1 : 1'b0);

assign exitcond_fu_674_p2 = ((indvar_phi_fu_253_p4 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign grp_sha256_final_fu_284_ap_start = ap_reg_grp_sha256_final_fu_284_ap_start;

assign grp_sha256_update_fu_303_ap_start = ap_reg_grp_sha256_update_fu_303_ap_start;

assign icmp_fu_640_p2 = ((tmp_fu_630_p4 == ap_const_lv26_0) ? 1'b1 : 1'b0);

assign indvar_next1_fu_739_p2 = (indvar1_reg_273 + ap_const_lv6_1);

assign indvar_next2_fu_717_p2 = (indvar9_phi_fu_265_p4 + ap_const_lv32_1);

assign indvar_next_fu_680_p2 = (indvar_phi_fu_253_p4 + ap_const_lv7_1);

assign n_1_fu_691_p2 = ($signed(n_load_reg_852) + $signed(ap_const_lv32_FFFFFFC0));

assign offset_1_fu_701_p2 = (offset_fu_176 + ap_const_lv32_40);

assign p_sum1_cast_fu_655_p1 = p_sum1_fu_650_p2;

assign p_sum1_fu_650_p2 = (tmp_143_cast_fu_646_p1 + tmp_cast_reg_847);

assign tmp_114_fu_665_p1 = hash_read_reg_842;

assign tmp_115_fu_745_p1 = indvar1_reg_273;

assign tmp_116_fu_723_p1 = ap_pipeline_reg_pp1_iter1_indvar9_reg_261;

assign tmp_117_fu_686_p1 = ap_pipeline_reg_pp0_iter1_indvar_reg_249;

assign tmp_143_cast_fu_646_p1 = offset_fu_176;

assign tmp_cast_fu_552_p1 = base_addr;

assign tmp_fu_630_p4 = {{n_fu_128[ap_const_lv32_1F : ap_const_lv32_6]}};

assign tmp_s_fu_624_p2 = ((n_fu_128 == ap_const_lv32_0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_cast_reg_847[32] <= 1'b0;
end

endmodule //sha256
