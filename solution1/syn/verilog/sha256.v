// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.913500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=4424,HLS_SYN_LUT=7134}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 41'b1;
parameter    ap_ST_fsm_state2 = 41'b10;
parameter    ap_ST_fsm_state3 = 41'b100;
parameter    ap_ST_fsm_state4 = 41'b1000;
parameter    ap_ST_fsm_state5 = 41'b10000;
parameter    ap_ST_fsm_state6 = 41'b100000;
parameter    ap_ST_fsm_state7 = 41'b1000000;
parameter    ap_ST_fsm_state8 = 41'b10000000;
parameter    ap_ST_fsm_state9 = 41'b100000000;
parameter    ap_ST_fsm_state10 = 41'b1000000000;
parameter    ap_ST_fsm_state11 = 41'b10000000000;
parameter    ap_ST_fsm_state12 = 41'b100000000000;
parameter    ap_ST_fsm_state13 = 41'b1000000000000;
parameter    ap_ST_fsm_state14 = 41'b10000000000000;
parameter    ap_ST_fsm_state15 = 41'b100000000000000;
parameter    ap_ST_fsm_state16 = 41'b1000000000000000;
parameter    ap_ST_fsm_state17 = 41'b10000000000000000;
parameter    ap_ST_fsm_state18 = 41'b100000000000000000;
parameter    ap_ST_fsm_state19 = 41'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 41'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 41'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 41'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 41'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 41'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 41'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 41'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 41'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 41'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 41'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 41'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 41'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 41'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 41'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 41'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 41'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 41'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 41'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 41'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 41'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 41'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 41'b10000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_11 = 64'b10001;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_13 = 64'b10011;
parameter    ap_const_lv64_14 = 64'b10100;
parameter    ap_const_lv64_15 = 64'b10101;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_17 = 64'b10111;
parameter    ap_const_lv64_18 = 64'b11000;
parameter    ap_const_lv64_19 = 64'b11001;
parameter    ap_const_lv64_1A = 64'b11010;
parameter    ap_const_lv64_1B = 64'b11011;
parameter    ap_const_lv64_1C = 64'b11100;
parameter    ap_const_lv64_1D = 64'b11101;
parameter    ap_const_lv64_1E = 64'b11110;
parameter    ap_const_lv64_1F = 64'b11111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_6A09E667 = 32'b1101010000010011110011001100111;
parameter    ap_const_lv32_BB67AE85 = 32'b10111011011001111010111010000101;
parameter    ap_const_lv32_3C6EF372 = 32'b111100011011101111001101110010;
parameter    ap_const_lv32_A54FF53A = 32'b10100101010011111111010100111010;
parameter    ap_const_lv32_510E527F = 32'b1010001000011100101001001111111;
parameter    ap_const_lv32_9B05688C = 32'b10011011000001010110100010001100;
parameter    ap_const_lv32_1F83D9AB = 32'b11111100000111101100110101011;
parameter    ap_const_lv32_5BE0CD19 = 32'b1011011111000001100110100011001;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_FFFFFFC0 = 32'b11111111111111111111111111000000;
parameter    ap_const_lv6_1 = 6'b1;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] data_address0;
reg    data_ce0;
wire   [7:0] data_q0;
wire   [31:0] base_offset;
wire   [31:0] bytes;
reg   [4:0] digest_address0;
reg    digest_ce0;
reg    digest_we0;
reg   [31:0] reg_1031;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_1169_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_1195_p2;
reg   [31:0] reg_1037;
reg   [31:0] reg_1043;
reg   [31:0] reg_1049;
reg   [31:0] reg_1055;
reg   [31:0] reg_1061;
reg   [31:0] reg_1067;
reg   [31:0] reg_1073;
reg   [31:0] reg_1079;
reg   [31:0] reg_1085;
reg   [31:0] reg_1091;
wire   [9:0] tmp_fu_1097_p1;
reg   [9:0] tmp_reg_1388;
reg   [31:0] n_load_reg_1394;
wire   [0:0] icmp_fu_1185_p2;
reg   [0:0] icmp_reg_1404;
wire   [9:0] tmp_125_fu_1191_p1;
reg   [9:0] tmp_125_reg_1408;
wire   [6:0] i_fu_1201_p2;
reg   [6:0] i_reg_1417;
wire   [5:0] i_7_fu_1261_p2;
reg   [5:0] i_7_reg_1430;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] exitcond4_fu_1256_p2;
reg   [31:0] sha256ctx_datalen_lo_1_reg_1440;
reg   [31:0] sha256ctx_bitlen_0_1_reg_1445;
reg   [31:0] sha256ctx_bitlen_1_1_reg_1450;
reg   [31:0] sha256ctx_state_0_2_2_reg_1455;
reg   [31:0] sha256ctx_state_1_2_2_reg_1460;
reg   [31:0] sha256ctx_state_2_2_2_reg_1465;
reg   [31:0] sha256ctx_state_3_2_2_reg_1470;
reg   [31:0] sha256ctx_state_4_2_2_reg_1475;
reg   [31:0] sha256ctx_state_5_2_2_reg_1480;
reg   [31:0] sha256ctx_state_6_2_2_reg_1485;
reg   [31:0] sha256ctx_state_7_2_2_reg_1490;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] ap_CS_fsm_state29;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state35;
wire   [0:0] ap_CS_fsm_state36;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state39;
wire   [0:0] ap_CS_fsm_state40;
reg   [5:0] seg_buf_address0;
reg    seg_buf_ce0;
reg    seg_buf_we0;
reg   [7:0] seg_buf_d0;
wire   [7:0] seg_buf_q0;
reg    seg_buf_ce1;
reg    seg_buf_we1;
reg   [5:0] sha256ctx_data_address0;
reg    sha256ctx_data_ce0;
reg    sha256ctx_data_we0;
reg   [7:0] sha256ctx_data_d0;
wire   [7:0] sha256ctx_data_q0;
reg   [5:0] sha256ctx_data_address1;
reg    sha256ctx_data_ce1;
reg    sha256ctx_data_we1;
wire   [7:0] sha256ctx_data_q1;
wire    grp_sha256_final_fu_834_ap_start;
wire    grp_sha256_final_fu_834_ap_done;
wire    grp_sha256_final_fu_834_ap_idle;
wire    grp_sha256_final_fu_834_ap_ready;
wire   [5:0] grp_sha256_final_fu_834_ctx_data_address0;
wire    grp_sha256_final_fu_834_ctx_data_ce0;
wire    grp_sha256_final_fu_834_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_834_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_834_ctx_data_address1;
wire    grp_sha256_final_fu_834_ctx_data_ce1;
wire    grp_sha256_final_fu_834_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_834_ctx_data_d1;
wire   [5:0] grp_sha256_final_fu_834_hash_address0;
wire    grp_sha256_final_fu_834_hash_ce0;
wire    grp_sha256_final_fu_834_hash_we0;
wire   [7:0] grp_sha256_final_fu_834_hash_d0;
wire   [5:0] grp_sha256_final_fu_834_hash_address1;
wire    grp_sha256_final_fu_834_hash_ce1;
wire    grp_sha256_final_fu_834_hash_we1;
wire   [7:0] grp_sha256_final_fu_834_hash_d1;
wire    grp_sha256_update_fu_853_ap_start;
wire    grp_sha256_update_fu_853_ap_done;
wire    grp_sha256_update_fu_853_ap_idle;
wire    grp_sha256_update_fu_853_ap_ready;
wire   [5:0] grp_sha256_update_fu_853_ctx_data_address0;
wire    grp_sha256_update_fu_853_ctx_data_ce0;
wire    grp_sha256_update_fu_853_ctx_data_we0;
wire   [7:0] grp_sha256_update_fu_853_ctx_data_d0;
wire   [5:0] grp_sha256_update_fu_853_ctx_data_address1;
wire    grp_sha256_update_fu_853_ctx_data_ce1;
reg   [31:0] grp_sha256_update_fu_853_ctx_datalen_read;
reg   [31:0] grp_sha256_update_fu_853_p_read1;
reg   [31:0] grp_sha256_update_fu_853_p_read2;
reg   [31:0] grp_sha256_update_fu_853_p_read3;
reg   [31:0] grp_sha256_update_fu_853_p_read4;
reg   [31:0] grp_sha256_update_fu_853_p_read5;
reg   [31:0] grp_sha256_update_fu_853_p_read6;
reg   [31:0] grp_sha256_update_fu_853_p_read7;
reg   [31:0] grp_sha256_update_fu_853_p_read8;
reg   [31:0] grp_sha256_update_fu_853_p_read9;
reg   [31:0] grp_sha256_update_fu_853_p_read10;
wire   [5:0] grp_sha256_update_fu_853_data_address0;
wire    grp_sha256_update_fu_853_data_ce0;
reg   [31:0] grp_sha256_update_fu_853_len;
wire   [31:0] grp_sha256_update_fu_853_ap_return_0;
wire   [31:0] grp_sha256_update_fu_853_ap_return_1;
wire   [31:0] grp_sha256_update_fu_853_ap_return_2;
wire   [31:0] grp_sha256_update_fu_853_ap_return_3;
wire   [31:0] grp_sha256_update_fu_853_ap_return_4;
wire   [31:0] grp_sha256_update_fu_853_ap_return_5;
wire   [31:0] grp_sha256_update_fu_853_ap_return_6;
wire   [31:0] grp_sha256_update_fu_853_ap_return_7;
wire   [31:0] grp_sha256_update_fu_853_ap_return_8;
wire   [31:0] grp_sha256_update_fu_853_ap_return_9;
wire   [31:0] grp_sha256_update_fu_853_ap_return_10;
reg   [6:0] i9_reg_810;
wire   [0:0] ap_CS_fsm_state4;
reg   [5:0] i_1_reg_822;
wire   [0:0] ap_CS_fsm_state7;
reg    ap_reg_grp_sha256_final_fu_834_ap_start;
wire   [0:0] ap_CS_fsm_state8;
reg    ap_reg_grp_sha256_update_fu_853_ap_start;
wire   [0:0] ap_CS_fsm_state5;
wire   [63:0] sum_cast_fu_1221_p1;
wire   [63:0] tmp_115_fu_1236_p1;
wire   [63:0] sum2_cast_fu_1281_p1;
wire   [63:0] tmp_114_fu_1291_p1;
wire   [0:0] ap_CS_fsm_state41;
reg   [31:0] n_fu_150;
wire   [31:0] n_1_fu_1226_p2;
reg   [31:0] sha256ctx_datalen_fu_154;
reg   [31:0] sha256ctx_bitlen_0_2_fu_158;
reg   [31:0] sha256ctx_bitlen_1_2_fu_162;
reg   [31:0] sha256ctx_state_0_2_fu_166;
reg   [31:0] sha256ctx_state_1_2_fu_170;
reg   [31:0] sha256ctx_state_2_2_fu_174;
reg   [31:0] sha256ctx_state_3_2_fu_178;
reg   [31:0] sha256ctx_state_4_2_fu_182;
reg   [31:0] sha256ctx_state_5_2_fu_186;
reg   [31:0] sha256ctx_state_6_2_fu_190;
reg   [31:0] sha256ctx_state_7_2_fu_194;
reg   [31:0] seg_offset_fu_198;
wire   [31:0] seg_offset_1_fu_1241_p2;
wire   [25:0] tmp_124_fu_1175_p4;
wire   [9:0] tmp_143_cast_fu_1207_p1;
wire   [9:0] tmp1_fu_1211_p2;
wire   [9:0] sum_fu_1216_p2;
wire   [31:0] i_1_cast_fu_1252_p1;
wire   [9:0] tmp_144_cast_fu_1267_p1;
wire   [9:0] tmp2_fu_1271_p2;
wire   [9:0] sum2_fu_1276_p2;
reg   [40:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'b1;
#0 ap_reg_grp_sha256_final_fu_834_ap_start = 1'b0;
#0 ap_reg_grp_sha256_update_fu_853_ap_start = 1'b0;
end

sha256_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_address0(data_address0),
    .data_ce0(data_ce0),
    .data_q0(data_q0),
    .base_offset(base_offset),
    .bytes(bytes),
    .digest_address0(digest_address0),
    .digest_ce0(digest_ce0),
    .digest_we0(digest_we0),
    .digest_d0(seg_buf_q0)
);

sha256_seg_buf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
seg_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(seg_buf_address0),
    .ce0(seg_buf_ce0),
    .we0(seg_buf_we0),
    .d0(seg_buf_d0),
    .q0(seg_buf_q0),
    .address1(grp_sha256_final_fu_834_hash_address1),
    .ce1(seg_buf_ce1),
    .we1(seg_buf_we1),
    .d1(grp_sha256_final_fu_834_hash_d1)
);

sha256_sha256ctx_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sha256ctx_data_address0),
    .ce0(sha256ctx_data_ce0),
    .we0(sha256ctx_data_we0),
    .d0(sha256ctx_data_d0),
    .q0(sha256ctx_data_q0),
    .address1(sha256ctx_data_address1),
    .ce1(sha256ctx_data_ce1),
    .we1(sha256ctx_data_we1),
    .d1(grp_sha256_final_fu_834_ctx_data_d1),
    .q1(sha256ctx_data_q1)
);

sha256_final grp_sha256_final_fu_834(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_834_ap_start),
    .ap_done(grp_sha256_final_fu_834_ap_done),
    .ap_idle(grp_sha256_final_fu_834_ap_idle),
    .ap_ready(grp_sha256_final_fu_834_ap_ready),
    .ctx_data_address0(grp_sha256_final_fu_834_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_834_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_834_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_834_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_834_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_834_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_834_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_834_ctx_data_d1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(reg_1031),
    .ctx_bitlen_0_read(reg_1037),
    .p_read3(reg_1043),
    .p_read1(reg_1049),
    .p_read2(reg_1055),
    .p_read4(reg_1061),
    .p_read5(reg_1067),
    .p_read6(reg_1073),
    .p_read7(reg_1079),
    .p_read8(reg_1085),
    .p_read9(reg_1091),
    .hash_address0(grp_sha256_final_fu_834_hash_address0),
    .hash_ce0(grp_sha256_final_fu_834_hash_ce0),
    .hash_we0(grp_sha256_final_fu_834_hash_we0),
    .hash_d0(grp_sha256_final_fu_834_hash_d0),
    .hash_address1(grp_sha256_final_fu_834_hash_address1),
    .hash_ce1(grp_sha256_final_fu_834_hash_ce1),
    .hash_we1(grp_sha256_final_fu_834_hash_we1),
    .hash_d1(grp_sha256_final_fu_834_hash_d1)
);

sha256_update grp_sha256_update_fu_853(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_update_fu_853_ap_start),
    .ap_done(grp_sha256_update_fu_853_ap_done),
    .ap_idle(grp_sha256_update_fu_853_ap_idle),
    .ap_ready(grp_sha256_update_fu_853_ap_ready),
    .ctx_data_address0(grp_sha256_update_fu_853_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_update_fu_853_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_update_fu_853_ctx_data_we0),
    .ctx_data_d0(grp_sha256_update_fu_853_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_update_fu_853_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_update_fu_853_ctx_data_ce1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(grp_sha256_update_fu_853_ctx_datalen_read),
    .p_read1(grp_sha256_update_fu_853_p_read1),
    .p_read2(grp_sha256_update_fu_853_p_read2),
    .p_read3(grp_sha256_update_fu_853_p_read3),
    .p_read4(grp_sha256_update_fu_853_p_read4),
    .p_read5(grp_sha256_update_fu_853_p_read5),
    .p_read6(grp_sha256_update_fu_853_p_read6),
    .p_read7(grp_sha256_update_fu_853_p_read7),
    .p_read8(grp_sha256_update_fu_853_p_read8),
    .p_read9(grp_sha256_update_fu_853_p_read9),
    .p_read10(grp_sha256_update_fu_853_p_read10),
    .data_address0(grp_sha256_update_fu_853_data_address0),
    .data_ce0(grp_sha256_update_fu_853_data_ce0),
    .data_q0(seg_buf_q0),
    .len(grp_sha256_update_fu_853_len),
    .ap_return_0(grp_sha256_update_fu_853_ap_return_0),
    .ap_return_1(grp_sha256_update_fu_853_ap_return_1),
    .ap_return_2(grp_sha256_update_fu_853_ap_return_2),
    .ap_return_3(grp_sha256_update_fu_853_ap_return_3),
    .ap_return_4(grp_sha256_update_fu_853_ap_return_4),
    .ap_return_5(grp_sha256_update_fu_853_ap_return_5),
    .ap_return_6(grp_sha256_update_fu_853_ap_return_6),
    .ap_return_7(grp_sha256_update_fu_853_ap_return_7),
    .ap_return_8(grp_sha256_update_fu_853_ap_return_8),
    .ap_return_9(grp_sha256_update_fu_853_ap_return_9),
    .ap_return_10(grp_sha256_update_fu_853_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_final_fu_834_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_s_fu_1169_p2 == 1'b0))) begin
            ap_reg_grp_sha256_final_fu_834_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_final_fu_834_ap_ready)) begin
            ap_reg_grp_sha256_final_fu_834_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_update_fu_853_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond5_fu_1195_p2)) | ((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == exitcond4_fu_1256_p2)))) begin
            ap_reg_grp_sha256_update_fu_853_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_update_fu_853_ap_ready)) begin
            ap_reg_grp_sha256_update_fu_853_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_1169_p2 == 1'b0) & (1'b0 == icmp_fu_1185_p2))) begin
        i9_reg_810 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i9_reg_810 <= i_reg_1417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_1169_p2 == 1'b0) & ~(1'b0 == icmp_fu_1185_p2))) begin
        i_1_reg_822 <= ap_const_lv6_0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_822 <= i_7_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == exitcond4_fu_1256_p2))) begin
        n_fu_150 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond5_fu_1195_p2))) begin
        n_fu_150 <= n_1_fu_1226_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        n_fu_150 <= bytes;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done))))) begin
        seg_offset_fu_198 <= seg_offset_1_fu_1241_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        seg_offset_fu_198 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_bitlen_0_2_fu_158 <= grp_sha256_update_fu_853_ap_return_1;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_bitlen_0_2_fu_158 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_bitlen_1_2_fu_162 <= grp_sha256_update_fu_853_ap_return_2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_bitlen_1_2_fu_162 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_datalen_fu_154 <= grp_sha256_update_fu_853_ap_return_0;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_datalen_fu_154 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_0_2_fu_166 <= grp_sha256_update_fu_853_ap_return_3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_0_2_fu_166 <= ap_const_lv32_6A09E667;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_1_2_fu_170 <= grp_sha256_update_fu_853_ap_return_4;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_1_2_fu_170 <= ap_const_lv32_BB67AE85;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_2_2_fu_174 <= grp_sha256_update_fu_853_ap_return_5;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_2_2_fu_174 <= ap_const_lv32_3C6EF372;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_3_2_fu_178 <= grp_sha256_update_fu_853_ap_return_6;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_3_2_fu_178 <= ap_const_lv32_A54FF53A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_4_2_fu_182 <= grp_sha256_update_fu_853_ap_return_7;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_4_2_fu_182 <= ap_const_lv32_510E527F;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_5_2_fu_186 <= grp_sha256_update_fu_853_ap_return_8;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_5_2_fu_186 <= ap_const_lv32_9B05688C;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_6_2_fu_190 <= grp_sha256_update_fu_853_ap_return_9;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_6_2_fu_190 <= ap_const_lv32_1F83D9AB;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404) & ~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))))) begin
        sha256ctx_state_7_2_fu_194 <= grp_sha256_update_fu_853_ap_return_10;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sha256ctx_state_7_2_fu_194 <= ap_const_lv32_5BE0CD19;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_7_reg_1430 <= i_7_fu_1261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_1417 <= i_fu_1201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_1169_p2 == 1'b0))) begin
        icmp_reg_1404 <= icmp_fu_1185_p2;
        tmp_125_reg_1408 <= tmp_125_fu_1191_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_load_reg_1394 <= n_fu_150;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_s_fu_1169_p2 == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond5_fu_1195_p2)))) begin
        reg_1031 <= sha256ctx_datalen_fu_154;
        reg_1037 <= sha256ctx_bitlen_0_2_fu_158;
        reg_1043 <= sha256ctx_bitlen_1_2_fu_162;
        reg_1049 <= sha256ctx_state_0_2_fu_166;
        reg_1055 <= sha256ctx_state_1_2_fu_170;
        reg_1061 <= sha256ctx_state_2_2_fu_174;
        reg_1067 <= sha256ctx_state_3_2_fu_178;
        reg_1073 <= sha256ctx_state_4_2_fu_182;
        reg_1079 <= sha256ctx_state_5_2_fu_186;
        reg_1085 <= sha256ctx_state_6_2_fu_190;
        reg_1091 <= sha256ctx_state_7_2_fu_194;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == exitcond4_fu_1256_p2))) begin
        sha256ctx_bitlen_0_1_reg_1445 <= sha256ctx_bitlen_0_2_fu_158;
        sha256ctx_bitlen_1_1_reg_1450 <= sha256ctx_bitlen_1_2_fu_162;
        sha256ctx_datalen_lo_1_reg_1440 <= sha256ctx_datalen_fu_154;
        sha256ctx_state_0_2_2_reg_1455 <= sha256ctx_state_0_2_fu_166;
        sha256ctx_state_1_2_2_reg_1460 <= sha256ctx_state_1_2_fu_170;
        sha256ctx_state_2_2_2_reg_1465 <= sha256ctx_state_2_2_fu_174;
        sha256ctx_state_3_2_2_reg_1470 <= sha256ctx_state_3_2_fu_178;
        sha256ctx_state_4_2_2_reg_1475 <= sha256ctx_state_4_2_fu_182;
        sha256ctx_state_5_2_2_reg_1480 <= sha256ctx_state_5_2_fu_186;
        sha256ctx_state_6_2_2_reg_1485 <= sha256ctx_state_6_2_fu_190;
        sha256ctx_state_7_2_2_reg_1490 <= sha256ctx_state_7_2_fu_194;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_1388 <= tmp_fu_1097_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_address0 = sum2_cast_fu_1281_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = sum_cast_fu_1221_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        digest_address0 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        digest_address0 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        digest_address0 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        digest_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        digest_address0 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        digest_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        digest_address0 = ap_const_lv64_19;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        digest_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        digest_address0 = ap_const_lv64_17;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        digest_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        digest_address0 = ap_const_lv64_15;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        digest_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        digest_address0 = ap_const_lv64_13;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        digest_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        digest_address0 = ap_const_lv64_11;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        digest_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        digest_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        digest_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        digest_address0 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        digest_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        digest_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        digest_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        digest_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        digest_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        digest_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        digest_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        digest_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        digest_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        digest_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        digest_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        digest_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        digest_address0 = ap_const_lv64_0;
    end else begin
        digest_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        digest_ce0 = 1'b1;
    end else begin
        digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        digest_we0 = 1'b1;
    end else begin
        digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_ctx_datalen_read = sha256ctx_datalen_lo_1_reg_1440;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_ctx_datalen_read = reg_1031;
        end else begin
            grp_sha256_update_fu_853_ctx_datalen_read = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_ctx_datalen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_len = n_load_reg_1394;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_len = ap_const_lv32_40;
        end else begin
            grp_sha256_update_fu_853_len = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_len = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read1 = sha256ctx_bitlen_0_1_reg_1445;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read1 = reg_1037;
        end else begin
            grp_sha256_update_fu_853_p_read1 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read10 = sha256ctx_state_7_2_2_reg_1490;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read10 = reg_1091;
        end else begin
            grp_sha256_update_fu_853_p_read10 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read2 = sha256ctx_bitlen_1_1_reg_1450;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read2 = reg_1043;
        end else begin
            grp_sha256_update_fu_853_p_read2 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read3 = sha256ctx_state_0_2_2_reg_1455;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read3 = reg_1049;
        end else begin
            grp_sha256_update_fu_853_p_read3 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read4 = sha256ctx_state_1_2_2_reg_1460;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read4 = reg_1055;
        end else begin
            grp_sha256_update_fu_853_p_read4 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read5 = sha256ctx_state_2_2_2_reg_1465;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read5 = reg_1061;
        end else begin
            grp_sha256_update_fu_853_p_read5 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read6 = sha256ctx_state_3_2_2_reg_1470;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read6 = reg_1067;
        end else begin
            grp_sha256_update_fu_853_p_read6 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read7 = sha256ctx_state_4_2_2_reg_1475;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read7 = reg_1073;
        end else begin
            grp_sha256_update_fu_853_p_read7 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read8 = sha256ctx_state_5_2_2_reg_1480;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read8 = reg_1079;
        end else begin
            grp_sha256_update_fu_853_p_read8 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (~(1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read9 = sha256ctx_state_6_2_2_reg_1485;
        end else if ((1'b0 == icmp_reg_1404)) begin
            grp_sha256_update_fu_853_p_read9 = reg_1085;
        end else begin
            grp_sha256_update_fu_853_p_read9 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_853_p_read9 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        seg_buf_address0 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        seg_buf_address0 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        seg_buf_address0 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        seg_buf_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        seg_buf_address0 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        seg_buf_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        seg_buf_address0 = ap_const_lv64_19;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        seg_buf_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        seg_buf_address0 = ap_const_lv64_17;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        seg_buf_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        seg_buf_address0 = ap_const_lv64_15;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        seg_buf_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        seg_buf_address0 = ap_const_lv64_13;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        seg_buf_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        seg_buf_address0 = ap_const_lv64_11;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        seg_buf_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        seg_buf_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        seg_buf_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        seg_buf_address0 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        seg_buf_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        seg_buf_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        seg_buf_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        seg_buf_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        seg_buf_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        seg_buf_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        seg_buf_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        seg_buf_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        seg_buf_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        seg_buf_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        seg_buf_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        seg_buf_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        seg_buf_address0 = ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        seg_buf_address0 = tmp_114_fu_1291_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        seg_buf_address0 = tmp_115_fu_1236_p1;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        seg_buf_address0 = grp_sha256_update_fu_853_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_address0 = grp_sha256_final_fu_834_hash_address0;
    end else begin
        seg_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        seg_buf_ce0 = grp_sha256_update_fu_853_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce0 = grp_sha256_final_fu_834_hash_ce0;
    end else begin
        seg_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce1 = grp_sha256_final_fu_834_hash_ce1;
    end else begin
        seg_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_d0 = data_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_d0 = grp_sha256_final_fu_834_hash_d0;
    end else begin
        seg_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we0 = grp_sha256_final_fu_834_hash_we0;
    end else begin
        seg_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we1 = grp_sha256_final_fu_834_hash_we1;
    end else begin
        seg_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_address0 = grp_sha256_update_fu_853_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address0 = grp_sha256_final_fu_834_ctx_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_address1 = grp_sha256_update_fu_853_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address1 = grp_sha256_final_fu_834_ctx_data_address1;
    end else begin
        sha256ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_ce0 = grp_sha256_update_fu_853_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce0 = grp_sha256_final_fu_834_ctx_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_ce1 = grp_sha256_update_fu_853_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce1 = grp_sha256_final_fu_834_ctx_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_d0 = grp_sha256_update_fu_853_ctx_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_d0 = grp_sha256_final_fu_834_ctx_data_d0;
    end else begin
        sha256ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b0 == icmp_reg_1404)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == icmp_reg_1404)))) begin
        sha256ctx_data_we0 = grp_sha256_update_fu_853_ctx_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we0 = grp_sha256_final_fu_834_ctx_data_we0;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we1 = grp_sha256_final_fu_834_ctx_data_we1;
    end else begin
        sha256ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_1169_p2 == 1'b0) & ~(1'b0 == icmp_fu_1185_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((tmp_s_fu_1169_p2 == 1'b0) & (1'b0 == icmp_fu_1185_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond5_fu_1195_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (~(((1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)) | (~(1'b0 == icmp_reg_1404) & (1'b0 == grp_sha256_update_fu_853_ap_done)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((1'b0 == exitcond4_fu_1256_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == grp_sha256_final_fu_834_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond4_fu_1256_p2 = ((i_1_cast_fu_1252_p1 == n_load_reg_1394) ? 1'b1 : 1'b0);

assign exitcond5_fu_1195_p2 = ((i9_reg_810 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign grp_sha256_final_fu_834_ap_start = ap_reg_grp_sha256_final_fu_834_ap_start;

assign grp_sha256_update_fu_853_ap_start = ap_reg_grp_sha256_update_fu_853_ap_start;

assign i_1_cast_fu_1252_p1 = i_1_reg_822;

assign i_7_fu_1261_p2 = (i_1_reg_822 + ap_const_lv6_1);

assign i_fu_1201_p2 = (i9_reg_810 + ap_const_lv7_1);

assign icmp_fu_1185_p2 = ((tmp_124_fu_1175_p4 == ap_const_lv26_0) ? 1'b1 : 1'b0);

assign n_1_fu_1226_p2 = ($signed(n_load_reg_1394) + $signed(ap_const_lv32_FFFFFFC0));

assign seg_offset_1_fu_1241_p2 = (seg_offset_fu_198 + ap_const_lv32_40);

assign sum2_cast_fu_1281_p1 = sum2_fu_1276_p2;

assign sum2_fu_1276_p2 = (tmp2_fu_1271_p2 + tmp_reg_1388);

assign sum_cast_fu_1221_p1 = sum_fu_1216_p2;

assign sum_fu_1216_p2 = (tmp1_fu_1211_p2 + tmp_reg_1388);

assign tmp1_fu_1211_p2 = (tmp_125_reg_1408 + tmp_143_cast_fu_1207_p1);

assign tmp2_fu_1271_p2 = (tmp_125_reg_1408 + tmp_144_cast_fu_1267_p1);

assign tmp_114_fu_1291_p1 = i_1_reg_822;

assign tmp_115_fu_1236_p1 = i9_reg_810;

assign tmp_124_fu_1175_p4 = {{n_fu_150[ap_const_lv32_1F : ap_const_lv32_6]}};

assign tmp_125_fu_1191_p1 = seg_offset_fu_198[9:0];

assign tmp_143_cast_fu_1207_p1 = i9_reg_810;

assign tmp_144_cast_fu_1267_p1 = i_1_reg_822;

assign tmp_fu_1097_p1 = base_offset[9:0];

assign tmp_s_fu_1169_p2 = ((n_fu_150 == ap_const_lv32_0) ? 1'b1 : 1'b0);

endmodule //sha256
