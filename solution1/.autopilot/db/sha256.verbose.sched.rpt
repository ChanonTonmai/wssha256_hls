

================================================================
== Vivado HLS Report for 'sha256'
================================================================
* Date:           Tue Apr 11 14:24:22 2017

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        sha256
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      6.91|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+-----------+-----------+-----------+--------+----------+
        |             |  Latency  | Iteration |  Initiation Interval  |  Trip  |          |
        |  Loop Name  | min | max |  Latency  |  achieved |   target  |  Count | Pipelined|
        +-------------+-----+-----+-----------+-----------+-----------+--------+----------+
        |- Loop 1     |    ?|    ?| 4 ~ 28228 |          -|          -|       ?|    no    |
        | + Loop 1.1  |  128|  128|          2|          -|          -|      64|    no    |
        | + Loop 1.2  |    0|  126|          2|          -|          -| 0 ~ 63 |    no    |
        +-------------+-----+-----+-----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 41
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	8  / (tmp_s)
	3  / (!tmp_s & !icmp)
	6  / (!tmp_s & icmp)
3 --> 
	4  / (!exitcond5)
	5  / (exitcond5)
4 --> 
	3  / true
5 --> 
	2  / true
6 --> 
	5  / (exitcond4)
	7  / (!exitcond4)
7 --> 
	6  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
* FSM state operations: 

 <State 1>: 2.57ns
ST_1: n (6)  [1/1] 0.00ns
:0  %n = alloca i32

ST_1: sha256ctx_datalen (7)  [1/1] 0.00ns
:1  %sha256ctx_datalen = alloca i32

ST_1: sha256ctx_bitlen_0_2 (8)  [1/1] 0.00ns
:2  %sha256ctx_bitlen_0_2 = alloca i32

ST_1: sha256ctx_bitlen_1_2 (9)  [1/1] 0.00ns
:3  %sha256ctx_bitlen_1_2 = alloca i32

ST_1: sha256ctx_state_0_2 (10)  [1/1] 0.00ns
:4  %sha256ctx_state_0_2 = alloca i32

ST_1: sha256ctx_state_1_2 (11)  [1/1] 0.00ns
:5  %sha256ctx_state_1_2 = alloca i32

ST_1: sha256ctx_state_2_2 (12)  [1/1] 0.00ns
:6  %sha256ctx_state_2_2 = alloca i32

ST_1: sha256ctx_state_3_2 (13)  [1/1] 0.00ns
:7  %sha256ctx_state_3_2 = alloca i32

ST_1: sha256ctx_state_4_2 (14)  [1/1] 0.00ns
:8  %sha256ctx_state_4_2 = alloca i32

ST_1: sha256ctx_state_5_2 (15)  [1/1] 0.00ns
:9  %sha256ctx_state_5_2 = alloca i32

ST_1: sha256ctx_state_6_2 (16)  [1/1] 0.00ns
:10  %sha256ctx_state_6_2 = alloca i32

ST_1: sha256ctx_state_7_2 (17)  [1/1] 0.00ns
:11  %sha256ctx_state_7_2 = alloca i32

ST_1: seg_offset (18)  [1/1] 0.00ns
:12  %seg_offset = alloca i32

ST_1: StgValue_55 (19)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap([256 x i8]* %data) nounwind, !map !27

ST_1: StgValue_56 (20)  [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_offset) nounwind, !map !33

ST_1: StgValue_57 (21)  [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap(i32 %bytes) nounwind, !map !39

ST_1: StgValue_58 (22)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([32 x i8]* %digest) nounwind, !map !43

ST_1: StgValue_59 (23)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @sha256_str) nounwind

ST_1: bytes_read (24)  [1/1] 1.00ns
:18  %bytes_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %bytes) nounwind

ST_1: base_offset_read (25)  [1/1] 1.00ns
:19  %base_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_offset) nounwind

ST_1: seg_buf (26)  [1/1] 0.00ns  loc: sha256/src/sha256.c:22
:20  %seg_buf = alloca [64 x i8], align 16

ST_1: sha256ctx_data (27)  [1/1] 0.00ns  loc: sha256/src/sha256.c:28
:21  %sha256ctx_data = alloca [64 x i8], align 1

ST_1: empty (28)  [1/1] 0.00ns
:22  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %data, [1 x i8]* @p_str3, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str3, i32 -1, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind

ST_1: StgValue_65 (29)  [1/1] 0.00ns
:23  call void (...)* @_ssdm_op_SpecInterface([256 x i8]* %data, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: empty_12 (30)  [1/1] 0.00ns
:24  %empty_12 = call i32 (...)* @_ssdm_op_SpecMemCore([32 x i8]* %digest, [1 x i8]* @p_str4, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str4, i32 -1, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4) nounwind

ST_1: StgValue_67 (31)  [1/1] 0.00ns
:25  call void (...)* @_ssdm_op_SpecInterface([32 x i8]* %digest, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_68 (32)  [1/1] 0.00ns  loc: sha256/src/sha256.c:17
:26  call void (...)* @_ssdm_op_SpecInterface(i32 %base_offset, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_69 (33)  [1/1] 0.00ns  loc: sha256/src/sha256.c:18
:27  call void (...)* @_ssdm_op_SpecInterface(i32 %bytes, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_70 (34)  [1/1] 0.00ns  loc: sha256/src/sha256.c:19
:28  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: tmp (35)  [1/1] 0.00ns  loc: sha256/src/sha256.c:32
:29  %tmp = trunc i32 %base_offset_read to i10

ST_1: StgValue_72 (36)  [1/1] 1.57ns
:30  store i32 0, i32* %seg_offset

ST_1: StgValue_73 (37)  [1/1] 1.57ns
:31  store i32 1541459225, i32* %sha256ctx_state_7_2

ST_1: StgValue_74 (38)  [1/1] 1.57ns
:32  store i32 528734635, i32* %sha256ctx_state_6_2

ST_1: StgValue_75 (39)  [1/1] 1.57ns
:33  store i32 -1694144372, i32* %sha256ctx_state_5_2

ST_1: StgValue_76 (40)  [1/1] 1.57ns
:34  store i32 1359893119, i32* %sha256ctx_state_4_2

ST_1: StgValue_77 (41)  [1/1] 1.57ns
:35  store i32 -1521486534, i32* %sha256ctx_state_3_2

ST_1: StgValue_78 (42)  [1/1] 1.57ns
:36  store i32 1013904242, i32* %sha256ctx_state_2_2

ST_1: StgValue_79 (43)  [1/1] 1.57ns
:37  store i32 -1150833019, i32* %sha256ctx_state_1_2

ST_1: StgValue_80 (44)  [1/1] 1.57ns
:38  store i32 1779033703, i32* %sha256ctx_state_0_2

ST_1: StgValue_81 (45)  [1/1] 1.57ns
:39  store i32 0, i32* %sha256ctx_bitlen_1_2

ST_1: StgValue_82 (46)  [1/1] 1.57ns
:40  store i32 0, i32* %sha256ctx_bitlen_0_2

ST_1: StgValue_83 (47)  [1/1] 1.57ns
:41  store i32 0, i32* %sha256ctx_datalen

ST_1: StgValue_84 (48)  [1/1] 1.57ns  loc: sha256/src/sha256.c:10
:42  store i32 %bytes_read, i32* %n

ST_1: StgValue_85 (49)  [1/1] 0.00ns  loc: sha256/src/sha256.c:32
:43  br label %.backedge


 <State 2>: 2.52ns
ST_2: n_load (51)  [1/1] 0.00ns  loc: sha256/src/sha256.c:38
.backedge:0  %n_load = load i32* %n

ST_2: tmp_s (52)  [1/1] 2.52ns  loc: sha256/src/sha256.c:32
.backedge:1  %tmp_s = icmp eq i32 %n_load, 0

ST_2: StgValue_88 (53)  [1/1] 0.00ns  loc: sha256/src/sha256.c:32
.backedge:2  br i1 %tmp_s, label %6, label %1

ST_2: seg_offset_load_1 (55)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:0  %seg_offset_load_1 = load i32* %seg_offset

ST_2: tmp_124 (56)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:1  %tmp_124 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %n_load, i32 6, i32 31)

ST_2: icmp (57)  [1/1] 2.43ns  loc: sha256/src/sha256.c:34
:2  %icmp = icmp eq i26 %tmp_124, 0

ST_2: tmp_125 (58)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:3  %tmp_125 = trunc i32 %seg_offset_load_1 to i10

ST_2: StgValue_93 (59)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:4  br i1 %icmp, label %.preheader.preheader, label %.preheader6.preheader

ST_2: StgValue_94 (61)  [1/1] 1.57ns  loc: sha256/src/sha256.c:36
.preheader6.preheader:0  br label %.preheader6

ST_2: StgValue_95 (121)  [1/1] 1.57ns  loc: sha256/src/sha256.c:44
.preheader.preheader:0  br label %.preheader

ST_2: sha256ctx_datalen_lo_2 (180)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:0  %sha256ctx_datalen_lo_2 = load i32* %sha256ctx_datalen

ST_2: sha256ctx_bitlen_0_2_17 (181)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:1  %sha256ctx_bitlen_0_2_17 = load i32* %sha256ctx_bitlen_0_2

ST_2: sha256ctx_bitlen_1_2_18 (182)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:2  %sha256ctx_bitlen_1_2_18 = load i32* %sha256ctx_bitlen_1_2

ST_2: sha256ctx_state_0_2_3 (183)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:3  %sha256ctx_state_0_2_3 = load i32* %sha256ctx_state_0_2

ST_2: sha256ctx_state_1_2_3 (184)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:4  %sha256ctx_state_1_2_3 = load i32* %sha256ctx_state_1_2

ST_2: sha256ctx_state_2_2_3 (185)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:5  %sha256ctx_state_2_2_3 = load i32* %sha256ctx_state_2_2

ST_2: sha256ctx_state_3_2_3 (186)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:6  %sha256ctx_state_3_2_3 = load i32* %sha256ctx_state_3_2

ST_2: sha256ctx_state_4_2_3 (187)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:7  %sha256ctx_state_4_2_3 = load i32* %sha256ctx_state_4_2

ST_2: sha256ctx_state_5_2_3 (188)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:8  %sha256ctx_state_5_2_3 = load i32* %sha256ctx_state_5_2

ST_2: sha256ctx_state_6_2_3 (189)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:9  %sha256ctx_state_6_2_3 = load i32* %sha256ctx_state_6_2

ST_2: sha256ctx_state_7_2_3 (190)  [1/1] 0.00ns  loc: sha256/src/sha256.c:52
:10  %sha256ctx_state_7_2_3 = load i32* %sha256ctx_state_7_2

ST_2: StgValue_107 (191)  [2/2] 2.52ns  loc: sha256/src/sha256.c:52
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_17, i32 %sha256ctx_bitlen_1_2_18, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind


 <State 3>: 5.13ns
ST_3: i9 (63)  [1/1] 0.00ns
.preheader6:0  %i9 = phi i7 [ %i, %2 ], [ 0, %.preheader6.preheader ]

ST_3: exitcond5 (64)  [1/1] 1.97ns  loc: sha256/src/sha256.c:36
.preheader6:1  %exitcond5 = icmp eq i7 %i9, -64

ST_3: empty_13 (65)  [1/1] 0.00ns
.preheader6:2  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind

ST_3: i (66)  [1/1] 1.72ns  loc: sha256/src/sha256.c:36
.preheader6:3  %i = add i7 %i9, 1

ST_3: StgValue_112 (67)  [1/1] 0.00ns  loc: sha256/src/sha256.c:36
.preheader6:4  br i1 %exitcond5, label %3, label %2

ST_3: tmp_143_cast (70)  [1/1] 0.00ns  loc: sha256/src/sha256.c:36
:1  %tmp_143_cast = zext i7 %i9 to i10

ST_3: tmp1 (71)  [1/1] 1.37ns  loc: sha256/src/sha256.c:34
:2  %tmp1 = add i10 %tmp_125, %tmp_143_cast

ST_3: sum (72)  [1/1] 1.37ns  loc: sha256/src/sha256.c:34
:3  %sum = add i10 %tmp1, %tmp

ST_3: sum_cast (73)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:4  %sum_cast = zext i10 %sum to i64

ST_3: data_addr (74)  [1/1] 0.00ns  loc: sha256/src/sha256.c:37
:5  %data_addr = getelementptr [256 x i8]* %data, i64 0, i64 %sum_cast

ST_3: data_load (75)  [2/2] 2.39ns  loc: sha256/src/sha256.c:37
:6  %data_load = load i8* %data_addr, align 1

ST_3: sha256ctx_datalen_lo (80)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:0  %sha256ctx_datalen_lo = load i32* %sha256ctx_datalen

ST_3: sha256ctx_bitlen_0_s (81)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:1  %sha256ctx_bitlen_0_s = load i32* %sha256ctx_bitlen_0_2

ST_3: sha256ctx_bitlen_1_s (82)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:2  %sha256ctx_bitlen_1_s = load i32* %sha256ctx_bitlen_1_2

ST_3: sha256ctx_state_0_2_1 (83)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:3  %sha256ctx_state_0_2_1 = load i32* %sha256ctx_state_0_2

ST_3: sha256ctx_state_1_2_1 (84)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:4  %sha256ctx_state_1_2_1 = load i32* %sha256ctx_state_1_2

ST_3: sha256ctx_state_2_2_1 (85)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:5  %sha256ctx_state_2_2_1 = load i32* %sha256ctx_state_2_2

ST_3: sha256ctx_state_3_2_1 (86)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:6  %sha256ctx_state_3_2_1 = load i32* %sha256ctx_state_3_2

ST_3: sha256ctx_state_4_2_1 (87)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:7  %sha256ctx_state_4_2_1 = load i32* %sha256ctx_state_4_2

ST_3: sha256ctx_state_5_2_1 (88)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:8  %sha256ctx_state_5_2_1 = load i32* %sha256ctx_state_5_2

ST_3: sha256ctx_state_6_2_1 (89)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:9  %sha256ctx_state_6_2_1 = load i32* %sha256ctx_state_6_2

ST_3: sha256ctx_state_7_2_1 (90)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:10  %sha256ctx_state_7_2_1 = load i32* %sha256ctx_state_7_2

ST_3: n_1 (92)  [1/1] 2.44ns  loc: sha256/src/sha256.c:38
:12  %n_1 = add i32 %n_load, -64

ST_3: call_ret (94)  [2/2] 3.14ns  loc: sha256/src/sha256.c:40
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_3: StgValue_132 (118)  [1/1] 1.57ns  loc: sha256/src/sha256.c:38
:38  store i32 %n_1, i32* %n


 <State 4>: 4.78ns
ST_4: tmp_115 (69)  [1/1] 0.00ns  loc: sha256/src/sha256.c:37
:0  %tmp_115 = zext i7 %i9 to i64

ST_4: data_load (75)  [1/2] 2.39ns  loc: sha256/src/sha256.c:37
:6  %data_load = load i8* %data_addr, align 1

ST_4: seg_buf_addr_2 (76)  [1/1] 0.00ns  loc: sha256/src/sha256.c:37
:7  %seg_buf_addr_2 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %tmp_115

ST_4: StgValue_136 (77)  [1/1] 2.39ns  loc: sha256/src/sha256.c:37
:8  store i8 %data_load, i8* %seg_buf_addr_2, align 1

ST_4: StgValue_137 (78)  [1/1] 0.00ns  loc: sha256/src/sha256.c:36
:9  br label %.preheader6


 <State 5>: 4.01ns
ST_5: seg_offset_load (91)  [1/1] 0.00ns  loc: sha256/src/sha256.c:39
:11  %seg_offset_load = load i32* %seg_offset

ST_5: seg_offset_1 (93)  [1/1] 2.44ns  loc: sha256/src/sha256.c:39
:13  %seg_offset_1 = add i32 %seg_offset_load, 64

ST_5: call_ret (94)  [1/2] 0.00ns  loc: sha256/src/sha256.c:40
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_5: sha256ctx_datalen_1 (95)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:15  %sha256ctx_datalen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0

ST_5: sha256ctx_bitlen_0 (96)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:16  %sha256ctx_bitlen_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1

ST_5: sha256ctx_bitlen_1 (97)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:17  %sha256ctx_bitlen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2

ST_5: sha256ctx_state_0 (98)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:18  %sha256ctx_state_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3

ST_5: sha256ctx_state_1 (99)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:19  %sha256ctx_state_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4

ST_5: sha256ctx_state_2 (100)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:20  %sha256ctx_state_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5

ST_5: sha256ctx_state_3 (101)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:21  %sha256ctx_state_3 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6

ST_5: sha256ctx_state_4 (102)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:22  %sha256ctx_state_4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7

ST_5: sha256ctx_state_5 (103)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:23  %sha256ctx_state_5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 8

ST_5: sha256ctx_state_6 (104)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:24  %sha256ctx_state_6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 9

ST_5: sha256ctx_state_7 (105)  [1/1] 0.00ns  loc: sha256/src/sha256.c:40
:25  %sha256ctx_state_7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 10

ST_5: StgValue_152 (106)  [1/1] 1.57ns  loc: sha256/src/sha256.c:39
:26  store i32 %seg_offset_1, i32* %seg_offset

ST_5: StgValue_153 (107)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:27  store i32 %sha256ctx_state_7, i32* %sha256ctx_state_7_2

ST_5: StgValue_154 (108)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:28  store i32 %sha256ctx_state_6, i32* %sha256ctx_state_6_2

ST_5: StgValue_155 (109)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:29  store i32 %sha256ctx_state_5, i32* %sha256ctx_state_5_2

ST_5: StgValue_156 (110)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:30  store i32 %sha256ctx_state_4, i32* %sha256ctx_state_4_2

ST_5: StgValue_157 (111)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:31  store i32 %sha256ctx_state_3, i32* %sha256ctx_state_3_2

ST_5: StgValue_158 (112)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:32  store i32 %sha256ctx_state_2, i32* %sha256ctx_state_2_2

ST_5: StgValue_159 (113)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:33  store i32 %sha256ctx_state_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_160 (114)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:34  store i32 %sha256ctx_state_0, i32* %sha256ctx_state_0_2

ST_5: StgValue_161 (115)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:35  store i32 %sha256ctx_bitlen_1, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_162 (116)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:36  store i32 %sha256ctx_bitlen_0, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_163 (117)  [1/1] 1.57ns  loc: sha256/src/sha256.c:40
:37  store i32 %sha256ctx_datalen_1, i32* %sha256ctx_datalen

ST_5: StgValue_164 (119)  [1/1] 0.00ns  loc: sha256/src/sha256.c:41
:39  br label %.backedge.backedge

ST_5: call_ret1 (152)  [1/2] 0.00ns  loc: sha256/src/sha256.c:46
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_5: sha256ctx_datalen_2 (153)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:12  %sha256ctx_datalen_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 0

ST_5: sha256ctx_bitlen_0_1_15 (154)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:13  %sha256ctx_bitlen_0_1_15 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 1

ST_5: sha256ctx_bitlen_1_1_16 (155)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:14  %sha256ctx_bitlen_1_1_16 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 2

ST_5: sha256ctx_state_0_1 (156)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:15  %sha256ctx_state_0_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 3

ST_5: sha256ctx_state_1_1 (157)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:16  %sha256ctx_state_1_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 4

ST_5: sha256ctx_state_2_1 (158)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:17  %sha256ctx_state_2_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 5

ST_5: sha256ctx_state_3_1 (159)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:18  %sha256ctx_state_3_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 6

ST_5: sha256ctx_state_4_1 (160)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:19  %sha256ctx_state_4_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 7

ST_5: sha256ctx_state_5_1 (161)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:20  %sha256ctx_state_5_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 8

ST_5: sha256ctx_state_6_1 (162)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:21  %sha256ctx_state_6_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 9

ST_5: sha256ctx_state_7_1 (163)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:22  %sha256ctx_state_7_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 10

ST_5: StgValue_177 (164)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:23  store i32 %sha256ctx_state_7_1, i32* %sha256ctx_state_7_2

ST_5: StgValue_178 (165)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:24  store i32 %sha256ctx_state_6_1, i32* %sha256ctx_state_6_2

ST_5: StgValue_179 (166)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:25  store i32 %sha256ctx_state_5_1, i32* %sha256ctx_state_5_2

ST_5: StgValue_180 (167)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:26  store i32 %sha256ctx_state_4_1, i32* %sha256ctx_state_4_2

ST_5: StgValue_181 (168)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:27  store i32 %sha256ctx_state_3_1, i32* %sha256ctx_state_3_2

ST_5: StgValue_182 (169)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:28  store i32 %sha256ctx_state_2_1, i32* %sha256ctx_state_2_2

ST_5: StgValue_183 (170)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:29  store i32 %sha256ctx_state_1_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_184 (171)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:30  store i32 %sha256ctx_state_0_1, i32* %sha256ctx_state_0_2

ST_5: StgValue_185 (172)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:31  store i32 %sha256ctx_bitlen_1_1_16, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_186 (173)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:32  store i32 %sha256ctx_bitlen_0_1_15, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_187 (174)  [1/1] 1.57ns  loc: sha256/src/sha256.c:46
:33  store i32 %sha256ctx_datalen_2, i32* %sha256ctx_datalen

ST_5: StgValue_188 (176)  [1/1] 0.00ns
:35  br label %.backedge.backedge

ST_5: StgValue_189 (178)  [1/1] 0.00ns
.backedge.backedge:0  br label %.backedge


 <State 6>: 5.13ns
ST_6: i_1 (123)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i6 [ %i_7, %4 ], [ 0, %.preheader.preheader ]

ST_6: i_1_cast (124)  [1/1] 0.00ns  loc: sha256/src/sha256.c:44
.preheader:1  %i_1_cast = zext i6 %i_1 to i32

ST_6: exitcond4 (125)  [1/1] 2.52ns  loc: sha256/src/sha256.c:44
.preheader:2  %exitcond4 = icmp eq i32 %i_1_cast, %n_load

ST_6: empty_14 (126)  [1/1] 0.00ns
.preheader:3  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 63, i64 0) nounwind

ST_6: i_7 (127)  [1/1] 1.72ns  loc: sha256/src/sha256.c:44
.preheader:4  %i_7 = add i6 %i_1, 1

ST_6: StgValue_195 (128)  [1/1] 0.00ns  loc: sha256/src/sha256.c:44
.preheader:5  br i1 %exitcond4, label %5, label %4

ST_6: tmp_144_cast (131)  [1/1] 0.00ns  loc: sha256/src/sha256.c:44
:1  %tmp_144_cast = zext i6 %i_1 to i10

ST_6: tmp2 (132)  [1/1] 1.37ns  loc: sha256/src/sha256.c:34
:2  %tmp2 = add i10 %tmp_125, %tmp_144_cast

ST_6: sum2 (133)  [1/1] 1.37ns  loc: sha256/src/sha256.c:34
:3  %sum2 = add i10 %tmp2, %tmp

ST_6: sum2_cast (134)  [1/1] 0.00ns  loc: sha256/src/sha256.c:34
:4  %sum2_cast = zext i10 %sum2 to i64

ST_6: data_addr_4 (135)  [1/1] 0.00ns  loc: sha256/src/sha256.c:45
:5  %data_addr_4 = getelementptr [256 x i8]* %data, i64 0, i64 %sum2_cast

ST_6: data_load_4 (136)  [2/2] 2.39ns  loc: sha256/src/sha256.c:45
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_6: sha256ctx_datalen_lo_1 (141)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:0  %sha256ctx_datalen_lo_1 = load i32* %sha256ctx_datalen

ST_6: sha256ctx_bitlen_0_1 (142)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:1  %sha256ctx_bitlen_0_1 = load i32* %sha256ctx_bitlen_0_2

ST_6: sha256ctx_bitlen_1_1 (143)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:2  %sha256ctx_bitlen_1_1 = load i32* %sha256ctx_bitlen_1_2

ST_6: sha256ctx_state_0_2_2 (144)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:3  %sha256ctx_state_0_2_2 = load i32* %sha256ctx_state_0_2

ST_6: sha256ctx_state_1_2_2 (145)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:4  %sha256ctx_state_1_2_2 = load i32* %sha256ctx_state_1_2

ST_6: sha256ctx_state_2_2_2 (146)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:5  %sha256ctx_state_2_2_2 = load i32* %sha256ctx_state_2_2

ST_6: sha256ctx_state_3_2_2 (147)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:6  %sha256ctx_state_3_2_2 = load i32* %sha256ctx_state_3_2

ST_6: sha256ctx_state_4_2_2 (148)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:7  %sha256ctx_state_4_2_2 = load i32* %sha256ctx_state_4_2

ST_6: sha256ctx_state_5_2_2 (149)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:8  %sha256ctx_state_5_2_2 = load i32* %sha256ctx_state_5_2

ST_6: sha256ctx_state_6_2_2 (150)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:9  %sha256ctx_state_6_2_2 = load i32* %sha256ctx_state_6_2

ST_6: sha256ctx_state_7_2_2 (151)  [1/1] 0.00ns  loc: sha256/src/sha256.c:46
:10  %sha256ctx_state_7_2_2 = load i32* %sha256ctx_state_7_2

ST_6: call_ret1 (152)  [2/2] 3.14ns  loc: sha256/src/sha256.c:46
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_6: StgValue_214 (175)  [1/1] 1.57ns
:34  store i32 0, i32* %n


 <State 7>: 4.78ns
ST_7: tmp_114 (130)  [1/1] 0.00ns  loc: sha256/src/sha256.c:45
:0  %tmp_114 = zext i6 %i_1 to i64

ST_7: data_load_4 (136)  [1/2] 2.39ns  loc: sha256/src/sha256.c:45
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_7: seg_buf_addr_3 (137)  [1/1] 0.00ns  loc: sha256/src/sha256.c:45
:7  %seg_buf_addr_3 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %tmp_114

ST_7: StgValue_218 (138)  [1/1] 2.39ns  loc: sha256/src/sha256.c:45
:8  store i8 %data_load_4, i8* %seg_buf_addr_3, align 1

ST_7: StgValue_219 (139)  [1/1] 0.00ns  loc: sha256/src/sha256.c:44
:9  br label %.preheader


 <State 8>: 0.00ns
ST_8: StgValue_220 (191)  [1/2] 0.00ns  loc: sha256/src/sha256.c:52
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_17, i32 %sha256ctx_bitlen_1_2_18, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind


 <State 9>: 2.39ns
ST_9: seg_buf_addr (192)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:12  %seg_buf_addr = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 0

ST_9: seg_buf_load (193)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:13  %seg_buf_load = load i8* %seg_buf_addr, align 16


 <State 10>: 4.78ns
ST_10: seg_buf_load (193)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:13  %seg_buf_load = load i8* %seg_buf_addr, align 16

ST_10: digest_addr (194)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:14  %digest_addr = getelementptr [32 x i8]* %digest, i64 0, i64 0

ST_10: StgValue_225 (195)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:15  store i8 %seg_buf_load, i8* %digest_addr, align 1

ST_10: seg_buf_addr_1 (196)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:16  %seg_buf_addr_1 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 1

ST_10: seg_buf_load_1 (197)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:17  %seg_buf_load_1 = load i8* %seg_buf_addr_1, align 1


 <State 11>: 4.78ns
ST_11: seg_buf_load_1 (197)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:17  %seg_buf_load_1 = load i8* %seg_buf_addr_1, align 1

ST_11: digest_addr_1 (198)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:18  %digest_addr_1 = getelementptr [32 x i8]* %digest, i64 0, i64 1

ST_11: StgValue_230 (199)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:19  store i8 %seg_buf_load_1, i8* %digest_addr_1, align 1

ST_11: seg_buf_addr_4 (200)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:20  %seg_buf_addr_4 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 2

ST_11: seg_buf_load_2 (201)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:21  %seg_buf_load_2 = load i8* %seg_buf_addr_4, align 2


 <State 12>: 4.78ns
ST_12: seg_buf_load_2 (201)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:21  %seg_buf_load_2 = load i8* %seg_buf_addr_4, align 2

ST_12: digest_addr_2 (202)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:22  %digest_addr_2 = getelementptr [32 x i8]* %digest, i64 0, i64 2

ST_12: StgValue_235 (203)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:23  store i8 %seg_buf_load_2, i8* %digest_addr_2, align 1

ST_12: seg_buf_addr_5 (204)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:24  %seg_buf_addr_5 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 3

ST_12: seg_buf_load_3 (205)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:25  %seg_buf_load_3 = load i8* %seg_buf_addr_5, align 1


 <State 13>: 4.78ns
ST_13: seg_buf_load_3 (205)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:25  %seg_buf_load_3 = load i8* %seg_buf_addr_5, align 1

ST_13: digest_addr_3 (206)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:26  %digest_addr_3 = getelementptr [32 x i8]* %digest, i64 0, i64 3

ST_13: StgValue_240 (207)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:27  store i8 %seg_buf_load_3, i8* %digest_addr_3, align 1

ST_13: seg_buf_addr_6 (208)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:28  %seg_buf_addr_6 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 4

ST_13: seg_buf_load_4 (209)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:29  %seg_buf_load_4 = load i8* %seg_buf_addr_6, align 4


 <State 14>: 4.78ns
ST_14: seg_buf_load_4 (209)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:29  %seg_buf_load_4 = load i8* %seg_buf_addr_6, align 4

ST_14: digest_addr_4 (210)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:30  %digest_addr_4 = getelementptr [32 x i8]* %digest, i64 0, i64 4

ST_14: StgValue_245 (211)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:31  store i8 %seg_buf_load_4, i8* %digest_addr_4, align 1

ST_14: seg_buf_addr_7 (212)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:32  %seg_buf_addr_7 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 5

ST_14: seg_buf_load_5 (213)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:33  %seg_buf_load_5 = load i8* %seg_buf_addr_7, align 1


 <State 15>: 4.78ns
ST_15: seg_buf_load_5 (213)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:33  %seg_buf_load_5 = load i8* %seg_buf_addr_7, align 1

ST_15: digest_addr_5 (214)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:34  %digest_addr_5 = getelementptr [32 x i8]* %digest, i64 0, i64 5

ST_15: StgValue_250 (215)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:35  store i8 %seg_buf_load_5, i8* %digest_addr_5, align 1

ST_15: seg_buf_addr_8 (216)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:36  %seg_buf_addr_8 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 6

ST_15: seg_buf_load_6 (217)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:37  %seg_buf_load_6 = load i8* %seg_buf_addr_8, align 2


 <State 16>: 4.78ns
ST_16: seg_buf_load_6 (217)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:37  %seg_buf_load_6 = load i8* %seg_buf_addr_8, align 2

ST_16: digest_addr_6 (218)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:38  %digest_addr_6 = getelementptr [32 x i8]* %digest, i64 0, i64 6

ST_16: StgValue_255 (219)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:39  store i8 %seg_buf_load_6, i8* %digest_addr_6, align 1

ST_16: seg_buf_addr_9 (220)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:40  %seg_buf_addr_9 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 7

ST_16: seg_buf_load_7 (221)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:41  %seg_buf_load_7 = load i8* %seg_buf_addr_9, align 1


 <State 17>: 4.78ns
ST_17: seg_buf_load_7 (221)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:41  %seg_buf_load_7 = load i8* %seg_buf_addr_9, align 1

ST_17: digest_addr_7 (222)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:42  %digest_addr_7 = getelementptr [32 x i8]* %digest, i64 0, i64 7

ST_17: StgValue_260 (223)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:43  store i8 %seg_buf_load_7, i8* %digest_addr_7, align 1

ST_17: seg_buf_addr_10 (224)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:44  %seg_buf_addr_10 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 8

ST_17: seg_buf_load_8 (225)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:45  %seg_buf_load_8 = load i8* %seg_buf_addr_10, align 8


 <State 18>: 4.78ns
ST_18: seg_buf_load_8 (225)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:45  %seg_buf_load_8 = load i8* %seg_buf_addr_10, align 8

ST_18: digest_addr_8 (226)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:46  %digest_addr_8 = getelementptr [32 x i8]* %digest, i64 0, i64 8

ST_18: StgValue_265 (227)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:47  store i8 %seg_buf_load_8, i8* %digest_addr_8, align 1

ST_18: seg_buf_addr_11 (228)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:48  %seg_buf_addr_11 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 9

ST_18: seg_buf_load_9 (229)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:49  %seg_buf_load_9 = load i8* %seg_buf_addr_11, align 1


 <State 19>: 4.78ns
ST_19: seg_buf_load_9 (229)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:49  %seg_buf_load_9 = load i8* %seg_buf_addr_11, align 1

ST_19: digest_addr_9 (230)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:50  %digest_addr_9 = getelementptr [32 x i8]* %digest, i64 0, i64 9

ST_19: StgValue_270 (231)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:51  store i8 %seg_buf_load_9, i8* %digest_addr_9, align 1

ST_19: seg_buf_addr_12 (232)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:52  %seg_buf_addr_12 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 10

ST_19: seg_buf_load_10 (233)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:53  %seg_buf_load_10 = load i8* %seg_buf_addr_12, align 2


 <State 20>: 4.78ns
ST_20: seg_buf_load_10 (233)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:53  %seg_buf_load_10 = load i8* %seg_buf_addr_12, align 2

ST_20: digest_addr_10 (234)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:54  %digest_addr_10 = getelementptr [32 x i8]* %digest, i64 0, i64 10

ST_20: StgValue_275 (235)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:55  store i8 %seg_buf_load_10, i8* %digest_addr_10, align 1

ST_20: seg_buf_addr_13 (236)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:56  %seg_buf_addr_13 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 11

ST_20: seg_buf_load_11 (237)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:57  %seg_buf_load_11 = load i8* %seg_buf_addr_13, align 1


 <State 21>: 4.78ns
ST_21: seg_buf_load_11 (237)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:57  %seg_buf_load_11 = load i8* %seg_buf_addr_13, align 1

ST_21: digest_addr_11 (238)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:58  %digest_addr_11 = getelementptr [32 x i8]* %digest, i64 0, i64 11

ST_21: StgValue_280 (239)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:59  store i8 %seg_buf_load_11, i8* %digest_addr_11, align 1

ST_21: seg_buf_addr_14 (240)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:60  %seg_buf_addr_14 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 12

ST_21: seg_buf_load_12 (241)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:61  %seg_buf_load_12 = load i8* %seg_buf_addr_14, align 4


 <State 22>: 4.78ns
ST_22: seg_buf_load_12 (241)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:61  %seg_buf_load_12 = load i8* %seg_buf_addr_14, align 4

ST_22: digest_addr_12 (242)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:62  %digest_addr_12 = getelementptr [32 x i8]* %digest, i64 0, i64 12

ST_22: StgValue_285 (243)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:63  store i8 %seg_buf_load_12, i8* %digest_addr_12, align 1

ST_22: seg_buf_addr_15 (244)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:64  %seg_buf_addr_15 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 13

ST_22: seg_buf_load_13 (245)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:65  %seg_buf_load_13 = load i8* %seg_buf_addr_15, align 1


 <State 23>: 4.78ns
ST_23: seg_buf_load_13 (245)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:65  %seg_buf_load_13 = load i8* %seg_buf_addr_15, align 1

ST_23: digest_addr_13 (246)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:66  %digest_addr_13 = getelementptr [32 x i8]* %digest, i64 0, i64 13

ST_23: StgValue_290 (247)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:67  store i8 %seg_buf_load_13, i8* %digest_addr_13, align 1

ST_23: seg_buf_addr_16 (248)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:68  %seg_buf_addr_16 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 14

ST_23: seg_buf_load_14 (249)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:69  %seg_buf_load_14 = load i8* %seg_buf_addr_16, align 2


 <State 24>: 4.78ns
ST_24: seg_buf_load_14 (249)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:69  %seg_buf_load_14 = load i8* %seg_buf_addr_16, align 2

ST_24: digest_addr_14 (250)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:70  %digest_addr_14 = getelementptr [32 x i8]* %digest, i64 0, i64 14

ST_24: StgValue_295 (251)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:71  store i8 %seg_buf_load_14, i8* %digest_addr_14, align 1

ST_24: seg_buf_addr_17 (252)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:72  %seg_buf_addr_17 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 15

ST_24: seg_buf_load_15 (253)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:73  %seg_buf_load_15 = load i8* %seg_buf_addr_17, align 1


 <State 25>: 4.78ns
ST_25: seg_buf_load_15 (253)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:73  %seg_buf_load_15 = load i8* %seg_buf_addr_17, align 1

ST_25: digest_addr_15 (254)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:74  %digest_addr_15 = getelementptr [32 x i8]* %digest, i64 0, i64 15

ST_25: StgValue_300 (255)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:75  store i8 %seg_buf_load_15, i8* %digest_addr_15, align 1

ST_25: seg_buf_addr_18 (256)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:76  %seg_buf_addr_18 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 16

ST_25: seg_buf_load_16 (257)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:77  %seg_buf_load_16 = load i8* %seg_buf_addr_18, align 16


 <State 26>: 4.78ns
ST_26: seg_buf_load_16 (257)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:77  %seg_buf_load_16 = load i8* %seg_buf_addr_18, align 16

ST_26: digest_addr_16 (258)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:78  %digest_addr_16 = getelementptr [32 x i8]* %digest, i64 0, i64 16

ST_26: StgValue_305 (259)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:79  store i8 %seg_buf_load_16, i8* %digest_addr_16, align 1

ST_26: seg_buf_addr_19 (260)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:80  %seg_buf_addr_19 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 17

ST_26: seg_buf_load_17 (261)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:81  %seg_buf_load_17 = load i8* %seg_buf_addr_19, align 1


 <State 27>: 4.78ns
ST_27: seg_buf_load_17 (261)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:81  %seg_buf_load_17 = load i8* %seg_buf_addr_19, align 1

ST_27: digest_addr_17 (262)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:82  %digest_addr_17 = getelementptr [32 x i8]* %digest, i64 0, i64 17

ST_27: StgValue_310 (263)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:83  store i8 %seg_buf_load_17, i8* %digest_addr_17, align 1

ST_27: seg_buf_addr_20 (264)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:84  %seg_buf_addr_20 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 18

ST_27: seg_buf_load_18 (265)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:85  %seg_buf_load_18 = load i8* %seg_buf_addr_20, align 2


 <State 28>: 4.78ns
ST_28: seg_buf_load_18 (265)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:85  %seg_buf_load_18 = load i8* %seg_buf_addr_20, align 2

ST_28: digest_addr_18 (266)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:86  %digest_addr_18 = getelementptr [32 x i8]* %digest, i64 0, i64 18

ST_28: StgValue_315 (267)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:87  store i8 %seg_buf_load_18, i8* %digest_addr_18, align 1

ST_28: seg_buf_addr_21 (268)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:88  %seg_buf_addr_21 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 19

ST_28: seg_buf_load_19 (269)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:89  %seg_buf_load_19 = load i8* %seg_buf_addr_21, align 1


 <State 29>: 4.78ns
ST_29: seg_buf_load_19 (269)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:89  %seg_buf_load_19 = load i8* %seg_buf_addr_21, align 1

ST_29: digest_addr_19 (270)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:90  %digest_addr_19 = getelementptr [32 x i8]* %digest, i64 0, i64 19

ST_29: StgValue_320 (271)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:91  store i8 %seg_buf_load_19, i8* %digest_addr_19, align 1

ST_29: seg_buf_addr_22 (272)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:92  %seg_buf_addr_22 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 20

ST_29: seg_buf_load_20 (273)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:93  %seg_buf_load_20 = load i8* %seg_buf_addr_22, align 4


 <State 30>: 4.78ns
ST_30: seg_buf_load_20 (273)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:93  %seg_buf_load_20 = load i8* %seg_buf_addr_22, align 4

ST_30: digest_addr_20 (274)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:94  %digest_addr_20 = getelementptr [32 x i8]* %digest, i64 0, i64 20

ST_30: StgValue_325 (275)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:95  store i8 %seg_buf_load_20, i8* %digest_addr_20, align 1

ST_30: seg_buf_addr_23 (276)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:96  %seg_buf_addr_23 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 21

ST_30: seg_buf_load_21 (277)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:97  %seg_buf_load_21 = load i8* %seg_buf_addr_23, align 1


 <State 31>: 4.78ns
ST_31: seg_buf_load_21 (277)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:97  %seg_buf_load_21 = load i8* %seg_buf_addr_23, align 1

ST_31: digest_addr_21 (278)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:98  %digest_addr_21 = getelementptr [32 x i8]* %digest, i64 0, i64 21

ST_31: StgValue_330 (279)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:99  store i8 %seg_buf_load_21, i8* %digest_addr_21, align 1

ST_31: seg_buf_addr_24 (280)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:100  %seg_buf_addr_24 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 22

ST_31: seg_buf_load_22 (281)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:101  %seg_buf_load_22 = load i8* %seg_buf_addr_24, align 2


 <State 32>: 4.78ns
ST_32: seg_buf_load_22 (281)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:101  %seg_buf_load_22 = load i8* %seg_buf_addr_24, align 2

ST_32: digest_addr_22 (282)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:102  %digest_addr_22 = getelementptr [32 x i8]* %digest, i64 0, i64 22

ST_32: StgValue_335 (283)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:103  store i8 %seg_buf_load_22, i8* %digest_addr_22, align 1

ST_32: seg_buf_addr_25 (284)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:104  %seg_buf_addr_25 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 23

ST_32: seg_buf_load_23 (285)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:105  %seg_buf_load_23 = load i8* %seg_buf_addr_25, align 1


 <State 33>: 4.78ns
ST_33: seg_buf_load_23 (285)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:105  %seg_buf_load_23 = load i8* %seg_buf_addr_25, align 1

ST_33: digest_addr_23 (286)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:106  %digest_addr_23 = getelementptr [32 x i8]* %digest, i64 0, i64 23

ST_33: StgValue_340 (287)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:107  store i8 %seg_buf_load_23, i8* %digest_addr_23, align 1

ST_33: seg_buf_addr_26 (288)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:108  %seg_buf_addr_26 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 24

ST_33: seg_buf_load_24 (289)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:109  %seg_buf_load_24 = load i8* %seg_buf_addr_26, align 8


 <State 34>: 4.78ns
ST_34: seg_buf_load_24 (289)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:109  %seg_buf_load_24 = load i8* %seg_buf_addr_26, align 8

ST_34: digest_addr_24 (290)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:110  %digest_addr_24 = getelementptr [32 x i8]* %digest, i64 0, i64 24

ST_34: StgValue_345 (291)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:111  store i8 %seg_buf_load_24, i8* %digest_addr_24, align 1

ST_34: seg_buf_addr_27 (292)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:112  %seg_buf_addr_27 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 25

ST_34: seg_buf_load_25 (293)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:113  %seg_buf_load_25 = load i8* %seg_buf_addr_27, align 1


 <State 35>: 4.78ns
ST_35: seg_buf_load_25 (293)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:113  %seg_buf_load_25 = load i8* %seg_buf_addr_27, align 1

ST_35: digest_addr_25 (294)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:114  %digest_addr_25 = getelementptr [32 x i8]* %digest, i64 0, i64 25

ST_35: StgValue_350 (295)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:115  store i8 %seg_buf_load_25, i8* %digest_addr_25, align 1

ST_35: seg_buf_addr_28 (296)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:116  %seg_buf_addr_28 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 26

ST_35: seg_buf_load_26 (297)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:117  %seg_buf_load_26 = load i8* %seg_buf_addr_28, align 2


 <State 36>: 4.78ns
ST_36: seg_buf_load_26 (297)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:117  %seg_buf_load_26 = load i8* %seg_buf_addr_28, align 2

ST_36: digest_addr_26 (298)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:118  %digest_addr_26 = getelementptr [32 x i8]* %digest, i64 0, i64 26

ST_36: StgValue_355 (299)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:119  store i8 %seg_buf_load_26, i8* %digest_addr_26, align 1

ST_36: seg_buf_addr_29 (300)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:120  %seg_buf_addr_29 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 27

ST_36: seg_buf_load_27 (301)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:121  %seg_buf_load_27 = load i8* %seg_buf_addr_29, align 1


 <State 37>: 4.78ns
ST_37: seg_buf_load_27 (301)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:121  %seg_buf_load_27 = load i8* %seg_buf_addr_29, align 1

ST_37: digest_addr_27 (302)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:122  %digest_addr_27 = getelementptr [32 x i8]* %digest, i64 0, i64 27

ST_37: StgValue_360 (303)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:123  store i8 %seg_buf_load_27, i8* %digest_addr_27, align 1

ST_37: seg_buf_addr_30 (304)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:124  %seg_buf_addr_30 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 28

ST_37: seg_buf_load_28 (305)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:125  %seg_buf_load_28 = load i8* %seg_buf_addr_30, align 4


 <State 38>: 4.78ns
ST_38: seg_buf_load_28 (305)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:125  %seg_buf_load_28 = load i8* %seg_buf_addr_30, align 4

ST_38: digest_addr_28 (306)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:126  %digest_addr_28 = getelementptr [32 x i8]* %digest, i64 0, i64 28

ST_38: StgValue_365 (307)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:127  store i8 %seg_buf_load_28, i8* %digest_addr_28, align 1

ST_38: seg_buf_addr_31 (308)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:128  %seg_buf_addr_31 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 29

ST_38: seg_buf_load_29 (309)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:129  %seg_buf_load_29 = load i8* %seg_buf_addr_31, align 1


 <State 39>: 4.78ns
ST_39: seg_buf_load_29 (309)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:129  %seg_buf_load_29 = load i8* %seg_buf_addr_31, align 1

ST_39: digest_addr_29 (310)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:130  %digest_addr_29 = getelementptr [32 x i8]* %digest, i64 0, i64 29

ST_39: StgValue_370 (311)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:131  store i8 %seg_buf_load_29, i8* %digest_addr_29, align 1

ST_39: seg_buf_addr_32 (312)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:132  %seg_buf_addr_32 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 30

ST_39: seg_buf_load_30 (313)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:133  %seg_buf_load_30 = load i8* %seg_buf_addr_32, align 2


 <State 40>: 4.78ns
ST_40: seg_buf_load_30 (313)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:133  %seg_buf_load_30 = load i8* %seg_buf_addr_32, align 2

ST_40: digest_addr_30 (314)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:134  %digest_addr_30 = getelementptr [32 x i8]* %digest, i64 0, i64 30

ST_40: StgValue_375 (315)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:135  store i8 %seg_buf_load_30, i8* %digest_addr_30, align 1

ST_40: seg_buf_addr_33 (316)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:136  %seg_buf_addr_33 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 31

ST_40: seg_buf_load_31 (317)  [2/2] 2.39ns  loc: sha256/src/sha256.c:56
:137  %seg_buf_load_31 = load i8* %seg_buf_addr_33, align 1


 <State 41>: 4.78ns
ST_41: seg_buf_load_31 (317)  [1/2] 2.39ns  loc: sha256/src/sha256.c:56
:137  %seg_buf_load_31 = load i8* %seg_buf_addr_33, align 1

ST_41: digest_addr_31 (318)  [1/1] 0.00ns  loc: sha256/src/sha256.c:56
:138  %digest_addr_31 = getelementptr [32 x i8]* %digest, i64 0, i64 31

ST_41: StgValue_380 (319)  [1/1] 2.39ns  loc: sha256/src/sha256.c:56
:139  store i8 %seg_buf_load_31, i8* %digest_addr_31, align 1

ST_41: StgValue_381 (320)  [1/1] 0.00ns  loc: sha256/src/sha256.c:58
:140  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 2.57ns
The critical path consists of the following:
	s_axi read on port 'bytes' [24]  (1 ns)
	'store' operation (sha256/src/sha256.c:10) of variable 'bytes' on local variable 'bytes' [48]  (1.57 ns)

 <State 2>: 2.52ns
The critical path consists of the following:
	'load' operation ('n_load', sha256/src/sha256.c:38) on local variable 'bytes' [51]  (0 ns)
	'icmp' operation ('tmp_s', sha256/src/sha256.c:32) [52]  (2.52 ns)

 <State 3>: 5.13ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256/src/sha256.c:36) [63]  (0 ns)
	'add' operation ('tmp1', sha256/src/sha256.c:34) [71]  (1.37 ns)
	'add' operation ('sum', sha256/src/sha256.c:34) [72]  (1.37 ns)
	'getelementptr' operation ('data_addr', sha256/src/sha256.c:37) [74]  (0 ns)
	'load' operation ('data_load', sha256/src/sha256.c:37) on array 'data' [75]  (2.39 ns)

 <State 4>: 4.78ns
The critical path consists of the following:
	'load' operation ('data_load', sha256/src/sha256.c:37) on array 'data' [75]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:37) of variable 'data_load', sha256/src/sha256.c:37 on array 'seg_buf', sha256/src/sha256.c:22 [77]  (2.39 ns)

 <State 5>: 4.01ns
The critical path consists of the following:
	'load' operation ('seg_offset_load', sha256/src/sha256.c:39) on local variable 'seg_offset' [91]  (0 ns)
	'add' operation ('seg_offset', sha256/src/sha256.c:39) [93]  (2.44 ns)
	'store' operation (sha256/src/sha256.c:39) of variable 'seg_offset', sha256/src/sha256.c:39 on local variable 'seg_offset' [106]  (1.57 ns)

 <State 6>: 5.13ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256/src/sha256.c:44) [123]  (0 ns)
	'add' operation ('tmp2', sha256/src/sha256.c:34) [132]  (1.37 ns)
	'add' operation ('sum2', sha256/src/sha256.c:34) [133]  (1.37 ns)
	'getelementptr' operation ('data_addr_4', sha256/src/sha256.c:45) [135]  (0 ns)
	'load' operation ('data_load_4', sha256/src/sha256.c:45) on array 'data' [136]  (2.39 ns)

 <State 7>: 4.78ns
The critical path consists of the following:
	'load' operation ('data_load_4', sha256/src/sha256.c:45) on array 'data' [136]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:45) of variable 'data_load_4', sha256/src/sha256.c:45 on array 'seg_buf', sha256/src/sha256.c:22 [138]  (2.39 ns)

 <State 8>: 0ns
The critical path consists of the following:

 <State 9>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('seg_buf_addr', sha256/src/sha256.c:56) [192]  (0 ns)
	'load' operation ('seg_buf_load', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [193]  (2.39 ns)

 <State 10>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [193]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load', sha256/src/sha256.c:56 on array 'digest' [195]  (2.39 ns)

 <State 11>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_1', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [197]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_1', sha256/src/sha256.c:56 on array 'digest' [199]  (2.39 ns)

 <State 12>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_2', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [201]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_2', sha256/src/sha256.c:56 on array 'digest' [203]  (2.39 ns)

 <State 13>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_3', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [205]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_3', sha256/src/sha256.c:56 on array 'digest' [207]  (2.39 ns)

 <State 14>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_4', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [209]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_4', sha256/src/sha256.c:56 on array 'digest' [211]  (2.39 ns)

 <State 15>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_5', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [213]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_5', sha256/src/sha256.c:56 on array 'digest' [215]  (2.39 ns)

 <State 16>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_6', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [217]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_6', sha256/src/sha256.c:56 on array 'digest' [219]  (2.39 ns)

 <State 17>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_7', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [221]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_7', sha256/src/sha256.c:56 on array 'digest' [223]  (2.39 ns)

 <State 18>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_8', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [225]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_8', sha256/src/sha256.c:56 on array 'digest' [227]  (2.39 ns)

 <State 19>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_9', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [229]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_9', sha256/src/sha256.c:56 on array 'digest' [231]  (2.39 ns)

 <State 20>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_10', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [233]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_10', sha256/src/sha256.c:56 on array 'digest' [235]  (2.39 ns)

 <State 21>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_11', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [237]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_11', sha256/src/sha256.c:56 on array 'digest' [239]  (2.39 ns)

 <State 22>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_12', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [241]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_12', sha256/src/sha256.c:56 on array 'digest' [243]  (2.39 ns)

 <State 23>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_13', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [245]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_13', sha256/src/sha256.c:56 on array 'digest' [247]  (2.39 ns)

 <State 24>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_14', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [249]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_14', sha256/src/sha256.c:56 on array 'digest' [251]  (2.39 ns)

 <State 25>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_15', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [253]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_15', sha256/src/sha256.c:56 on array 'digest' [255]  (2.39 ns)

 <State 26>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_16', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [257]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_16', sha256/src/sha256.c:56 on array 'digest' [259]  (2.39 ns)

 <State 27>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_17', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [261]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_17', sha256/src/sha256.c:56 on array 'digest' [263]  (2.39 ns)

 <State 28>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_18', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [265]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_18', sha256/src/sha256.c:56 on array 'digest' [267]  (2.39 ns)

 <State 29>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_19', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [269]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_19', sha256/src/sha256.c:56 on array 'digest' [271]  (2.39 ns)

 <State 30>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_20', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [273]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_20', sha256/src/sha256.c:56 on array 'digest' [275]  (2.39 ns)

 <State 31>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_21', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [277]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_21', sha256/src/sha256.c:56 on array 'digest' [279]  (2.39 ns)

 <State 32>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_22', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [281]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_22', sha256/src/sha256.c:56 on array 'digest' [283]  (2.39 ns)

 <State 33>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_23', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [285]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_23', sha256/src/sha256.c:56 on array 'digest' [287]  (2.39 ns)

 <State 34>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_24', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [289]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_24', sha256/src/sha256.c:56 on array 'digest' [291]  (2.39 ns)

 <State 35>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_25', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [293]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_25', sha256/src/sha256.c:56 on array 'digest' [295]  (2.39 ns)

 <State 36>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_26', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [297]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_26', sha256/src/sha256.c:56 on array 'digest' [299]  (2.39 ns)

 <State 37>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_27', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [301]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_27', sha256/src/sha256.c:56 on array 'digest' [303]  (2.39 ns)

 <State 38>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_28', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [305]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_28', sha256/src/sha256.c:56 on array 'digest' [307]  (2.39 ns)

 <State 39>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_29', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [309]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_29', sha256/src/sha256.c:56 on array 'digest' [311]  (2.39 ns)

 <State 40>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_30', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [313]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_30', sha256/src/sha256.c:56 on array 'digest' [315]  (2.39 ns)

 <State 41>: 4.78ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_31', sha256/src/sha256.c:56) on array 'seg_buf', sha256/src/sha256.c:22 [317]  (2.39 ns)
	'store' operation (sha256/src/sha256.c:56) of variable 'seg_buf_load_31', sha256/src/sha256.c:56 on array 'digest' [319]  (2.39 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
