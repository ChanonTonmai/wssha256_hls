

================================================================
== Vivado HLS Report for 'sha256_transform'
================================================================
* Date:           Tue Apr 11 14:24:22 2017

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        sha256
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      6.65|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  435|  435|  435|  435|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   48|   48|         3|          -|          -|    16|    no    |
        |- Loop 2  |  192|  192|         4|          -|          -|    48|    no    |
        |- Loop 3  |  192|  192|         3|          -|          -|    64|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 11
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp)
	5  / (tmp)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
	6  / (!exitcond)
	9  / (exitcond)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	5  / true
9 --> 
	10  / (!tmp_38)
10 --> 
	11  / true
11 --> 
	9  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: ctx_state_7_read_1 (11)  [1/1] 0.00ns
:0  %ctx_state_7_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_7_read)

ST_1: ctx_state_6_read_1 (12)  [1/1] 0.00ns
:1  %ctx_state_6_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_6_read)

ST_1: ctx_state_5_read_1 (13)  [1/1] 0.00ns
:2  %ctx_state_5_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_5_read)

ST_1: ctx_state_4_read_1 (14)  [1/1] 0.00ns
:3  %ctx_state_4_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_4_read)

ST_1: ctx_state_3_read_1 (15)  [1/1] 0.00ns
:4  %ctx_state_3_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_3_read)

ST_1: ctx_state_2_read_1 (16)  [1/1] 0.00ns
:5  %ctx_state_2_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_2_read)

ST_1: ctx_state_1_read_1 (17)  [1/1] 0.00ns
:6  %ctx_state_1_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_1_read)

ST_1: ctx_state_0_read_1 (18)  [1/1] 0.00ns
:7  %ctx_state_0_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_0_read)

ST_1: m (19)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:32
:8  %m = alloca [64 x i32], align 16

ST_1: StgValue_21 (20)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:34
:9  br label %1


 <State 2>: 2.39ns
ST_2: i (22)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:34
:0  %i = phi i5 [ 0, %0 ], [ %tmp_9, %2 ]

ST_2: j (23)  [1/1] 0.00ns
:1  %j = phi i7 [ 0, %0 ], [ %j_1, %2 ]

ST_2: tmp (24)  [1/1] 1.91ns  loc: sha256/src/sha256_impl.c:34
:2  %tmp = icmp eq i5 %i, -16

ST_2: empty (25)  [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)

ST_2: tmp_9 (26)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:34
:4  %tmp_9 = add i5 %i, 1

ST_2: StgValue_27 (27)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:34
:5  br i1 %tmp, label %.preheader.preheader, label %2

ST_2: tmp_8 (29)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:0  %tmp_8 = zext i7 %j to i64

ST_2: data_addr (30)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:1  %data_addr = getelementptr [64 x i8]* %data, i64 0, i64 %tmp_8

ST_2: data_load (31)  [2/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:2  %data_load = load i8* %data_addr, align 1

ST_2: tmp_13 (32)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:34
:3  %tmp_13 = trunc i7 %j to i6

ST_2: tmp_1 (33)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:4  %tmp_1 = or i6 %tmp_13, 1

ST_2: tmp_2 (34)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:5  %tmp_2 = zext i6 %tmp_1 to i64

ST_2: data_addr_1 (35)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:6  %data_addr_1 = getelementptr [64 x i8]* %data, i64 0, i64 %tmp_2

ST_2: data_load_1 (36)  [2/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:7  %data_load_1 = load i8* %data_addr_1, align 1

ST_2: j_1 (49)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:34
:20  %j_1 = add i7 4, %j

ST_2: StgValue_37 (52)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:36
.preheader.preheader:0  br label %.preheader


 <State 3>: 2.39ns
ST_3: data_load (31)  [1/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:2  %data_load = load i8* %data_addr, align 1

ST_3: data_load_1 (36)  [1/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:7  %data_load_1 = load i8* %data_addr_1, align 1

ST_3: tmp_5 (37)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:8  %tmp_5 = or i6 %tmp_13, 2

ST_3: tmp_6 (38)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:9  %tmp_6 = zext i6 %tmp_5 to i64

ST_3: data_addr_2 (39)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:10  %data_addr_2 = getelementptr [64 x i8]* %data, i64 0, i64 %tmp_6

ST_3: data_load_2 (40)  [2/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:11  %data_load_2 = load i8* %data_addr_2, align 1

ST_3: tmp_3 (41)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:12  %tmp_3 = or i6 %tmp_13, 3

ST_3: tmp_7 (42)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:13  %tmp_7 = zext i6 %tmp_3 to i64

ST_3: data_addr_3 (43)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:14  %data_addr_3 = getelementptr [64 x i8]* %data, i64 0, i64 %tmp_7

ST_3: data_load_3 (44)  [2/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:15  %data_load_3 = load i8* %data_addr_3, align 1


 <State 4>: 5.10ns
ST_4: data_load_2 (40)  [1/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:11  %data_load_2 = load i8* %data_addr_2, align 1

ST_4: data_load_3 (44)  [1/2] 2.39ns  loc: sha256/src/sha256_impl.c:35
:15  %data_load_3 = load i8* %data_addr_3, align 1

ST_4: tmp_s (45)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:16  %tmp_s = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %data_load, i8 %data_load_1, i8 %data_load_2, i8 %data_load_3)

ST_4: tmp_4 (46)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:17  %tmp_4 = zext i5 %i to i64

ST_4: m_addr (47)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:35
:18  %m_addr = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_4

ST_4: StgValue_53 (48)  [1/1] 2.71ns  loc: sha256/src/sha256_impl.c:35
:19  store i32 %tmp_s, i32* %m_addr, align 4

ST_4: StgValue_54 (50)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:34
:21  br label %1


 <State 5>: 4.43ns
ST_5: i_1 (54)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i7 [ %i_3, %3 ], [ 16, %.preheader.preheader ]

ST_5: exitcond (55)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:36
.preheader:1  %exitcond = icmp eq i7 %i_1, -64

ST_5: empty_9 (56)  [1/1] 0.00ns
.preheader:2  %empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 48, i64 48, i64 48)

ST_5: StgValue_58 (57)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:36
.preheader:3  br i1 %exitcond, label %.preheader1.preheader, label %3

ST_5: tmp_10 (59)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:37
:0  %tmp_10 = add i7 -2, %i_1

ST_5: tmp_11 (60)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:1  %tmp_11 = zext i7 %tmp_10 to i64

ST_5: m_addr_1 (61)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:2  %m_addr_1 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_11

ST_5: m_load (62)  [2/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:3  %m_load = load i32* %m_addr_1, align 4

ST_5: tmp_21 (73)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:37
:14  %tmp_21 = add i7 -7, %i_1

ST_5: tmp_22 (74)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:15  %tmp_22 = zext i7 %tmp_21 to i64

ST_5: m_addr_2 (75)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:16  %m_addr_2 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_22

ST_5: m_load_1 (76)  [2/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:17  %m_load_1 = load i32* %m_addr_2, align 4

ST_5: StgValue_67 (104)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:48
.preheader1.preheader:0  br label %.preheader1


 <State 6>: 4.43ns
ST_6: m_load (62)  [1/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:3  %m_load = load i32* %m_addr_1, align 4

ST_6: m_load_1 (76)  [1/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:17  %m_load_1 = load i32* %m_addr_2, align 4

ST_6: tmp_23 (77)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:37
:18  %tmp_23 = add i7 -15, %i_1

ST_6: tmp_24 (78)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:19  %tmp_24 = zext i7 %tmp_23 to i64

ST_6: m_addr_3 (79)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:20  %m_addr_3 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_24

ST_6: m_load_2 (80)  [2/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:21  %m_load_2 = load i32* %m_addr_3, align 4

ST_6: tmp_34 (91)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:37
:32  %tmp_34 = add i7 -16, %i_1

ST_6: tmp_35 (92)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:33  %tmp_35 = zext i7 %tmp_34 to i64

ST_6: m_addr_4 (93)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:34  %m_addr_4 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_35

ST_6: m_load_3 (94)  [2/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:35  %m_load_3 = load i32* %m_addr_4, align 4


 <State 7>: 5.15ns
ST_7: tmp_12 (63)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:4  %tmp_12 = call i15 @_ssdm_op_PartSelect.i15.i32.i32.i32(i32 %m_load, i32 17, i32 31)

ST_7: tmp_16 (64)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:5  %tmp_16 = trunc i32 %m_load to i17

ST_7: tmp_14 (65)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:6  %tmp_14 = call i32 @_ssdm_op_BitConcatenate.i32.i17.i15(i17 %tmp_16, i15 %tmp_12)

ST_7: tmp_15 (66)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:7  %tmp_15 = call i13 @_ssdm_op_PartSelect.i13.i32.i32.i32(i32 %m_load, i32 19, i32 31)

ST_7: tmp_26 (67)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:8  %tmp_26 = trunc i32 %m_load to i19

ST_7: tmp_17 (68)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:9  %tmp_17 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i13(i19 %tmp_26, i13 %tmp_15)

ST_7: tmp_18 (69)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:10  %tmp_18 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %m_load, i32 10, i32 31)

ST_7: tmp_19 (70)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:11  %tmp_19 = zext i22 %tmp_18 to i32

ST_7: tmp2 (71)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:12  %tmp2 = xor i32 %tmp_19, %tmp_17

ST_7: tmp_20 (72)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:13  %tmp_20 = xor i32 %tmp2, %tmp_14

ST_7: m_load_2 (80)  [1/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:21  %m_load_2 = load i32* %m_addr_3, align 4

ST_7: tmp_25 (81)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:22  %tmp_25 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %m_load_2, i32 7, i32 31)

ST_7: tmp_29 (82)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:23  %tmp_29 = trunc i32 %m_load_2 to i7

ST_7: tmp_27 (83)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:24  %tmp_27 = call i32 @_ssdm_op_BitConcatenate.i32.i7.i25(i7 %tmp_29, i25 %tmp_25)

ST_7: tmp_28 (84)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:25  %tmp_28 = call i14 @_ssdm_op_PartSelect.i14.i32.i32.i32(i32 %m_load_2, i32 18, i32 31)

ST_7: tmp_40 (85)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:26  %tmp_40 = trunc i32 %m_load_2 to i18

ST_7: tmp_30 (86)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:27  %tmp_30 = call i32 @_ssdm_op_BitConcatenate.i32.i18.i14(i18 %tmp_40, i14 %tmp_28)

ST_7: tmp_31 (87)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:28  %tmp_31 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %m_load_2, i32 3, i32 31)

ST_7: tmp_32 (88)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:29  %tmp_32 = zext i29 %tmp_31 to i32

ST_7: tmp3 (89)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:30  %tmp3 = xor i32 %tmp_32, %tmp_30

ST_7: tmp_33 (90)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37 (grouped into LUT with out node tmp5)
:31  %tmp_33 = xor i32 %tmp3, %tmp_27

ST_7: m_load_3 (94)  [1/2] 2.71ns  loc: sha256/src/sha256_impl.c:37
:35  %m_load_3 = load i32* %m_addr_4, align 4

ST_7: tmp5 (96)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:37 (out node of the LUT)
:37  %tmp5 = add i32 %tmp_20, %tmp_33


 <State 8>: 6.65ns
ST_8: tmp4 (95)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:37
:36  %tmp4 = add i32 %m_load_1, %m_load_3

ST_8: tmp_36 (97)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:37
:38  %tmp_36 = add i32 %tmp5, %tmp4

ST_8: tmp_37 (98)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:39  %tmp_37 = zext i7 %i_1 to i64

ST_8: m_addr_5 (99)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:37
:40  %m_addr_5 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_37

ST_8: StgValue_105 (100)  [1/1] 2.71ns  loc: sha256/src/sha256_impl.c:37
:41  store i32 %tmp_36, i32* %m_addr_5, align 4

ST_8: i_3 (101)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:36
:42  %i_3 = add i7 1, %i_1

ST_8: StgValue_107 (102)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:36
:43  br label %.preheader


 <State 9>: 5.31ns
ST_9: h1 (106)  [1/1] 0.00ns
.preheader1:0  %h1 = phi i32 [ %h, %4 ], [ %ctx_state_7_read_1, %.preheader1.preheader ]

ST_9: h (107)  [1/1] 0.00ns
.preheader1:1  %h = phi i32 [ %g, %4 ], [ %ctx_state_6_read_1, %.preheader1.preheader ]

ST_9: g (108)  [1/1] 0.00ns
.preheader1:2  %g = phi i32 [ %f, %4 ], [ %ctx_state_5_read_1, %.preheader1.preheader ]

ST_9: f (109)  [1/1] 0.00ns
.preheader1:3  %f = phi i32 [ %e, %4 ], [ %ctx_state_4_read_1, %.preheader1.preheader ]

ST_9: d1 (110)  [1/1] 0.00ns
.preheader1:4  %d1 = phi i32 [ %d, %4 ], [ %ctx_state_3_read_1, %.preheader1.preheader ]

ST_9: d (111)  [1/1] 0.00ns
.preheader1:5  %d = phi i32 [ %c, %4 ], [ %ctx_state_2_read_1, %.preheader1.preheader ]

ST_9: c (112)  [1/1] 0.00ns
.preheader1:6  %c = phi i32 [ %b, %4 ], [ %ctx_state_1_read_1, %.preheader1.preheader ]

ST_9: b (113)  [1/1] 0.00ns
.preheader1:7  %b = phi i32 [ %a, %4 ], [ %ctx_state_0_read_1, %.preheader1.preheader ]

ST_9: i_2 (114)  [1/1] 0.00ns
.preheader1:8  %i_2 = phi i7 [ %i_4, %4 ], [ 0, %.preheader1.preheader ]

ST_9: tmp_38 (115)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:48
.preheader1:9  %tmp_38 = icmp eq i7 %i_2, -64

ST_9: empty_10 (116)  [1/1] 0.00ns
.preheader1:10  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_9: i_4 (117)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:48
.preheader1:11  %i_4 = add i7 %i_2, 1

ST_9: StgValue_120 (118)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:48
.preheader1:12  br i1 %tmp_38, label %5, label %4

ST_9: tmp_39 (120)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:0  %tmp_39 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %f, i32 6, i32 31)

ST_9: tmp_43 (121)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:54 (grouped into LUT with out node tmp_48)
:1  %tmp_43 = trunc i32 %f to i6

ST_9: tmp_41 (122)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:2  %tmp_41 = call i32 @_ssdm_op_BitConcatenate.i32.i6.i26(i6 %tmp_43, i26 %tmp_39)

ST_9: tmp_42 (123)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:3  %tmp_42 = call i21 @_ssdm_op_PartSelect.i21.i32.i32.i32(i32 %f, i32 11, i32 31)

ST_9: tmp_46 (124)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:54 (grouped into LUT with out node tmp_48)
:4  %tmp_46 = trunc i32 %f to i11

ST_9: tmp_44 (125)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:5  %tmp_44 = call i32 @_ssdm_op_BitConcatenate.i32.i11.i21(i11 %tmp_46, i21 %tmp_42)

ST_9: tmp_45 (126)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:6  %tmp_45 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %f, i32 25, i32 31)

ST_9: tmp_55 (127)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:54 (grouped into LUT with out node tmp_48)
:7  %tmp_55 = trunc i32 %f to i25

ST_9: tmp_47 (128)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:8  %tmp_47 = call i32 @_ssdm_op_BitConcatenate.i32.i25.i7(i25 %tmp_55, i7 %tmp_45)

ST_9: tmp6 (129)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_48)
:9  %tmp6 = xor i32 %tmp_41, %tmp_44

ST_9: tmp_48 (130)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:49 (out node of the LUT)
:10  %tmp_48 = xor i32 %tmp6, %tmp_47

ST_9: tmp_49 (131)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_52)
:11  %tmp_49 = and i32 %f, %g

ST_9: tmp_50 (132)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_52)
:12  %tmp_50 = xor i32 %f, -1

ST_9: tmp_51 (133)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49 (grouped into LUT with out node tmp_52)
:13  %tmp_51 = and i32 %h, %tmp_50

ST_9: tmp_52 (134)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:49 (out node of the LUT)
:14  %tmp_52 = xor i32 %tmp_49, %tmp_51

ST_9: tmp_53 (135)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49
:15  %tmp_53 = zext i7 %i_2 to i64

ST_9: k_addr (136)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49
:16  %k_addr = getelementptr inbounds [64 x i32]* @k, i64 0, i64 %tmp_53

ST_9: k_load (137)  [2/2] 2.39ns  loc: sha256/src/sha256_impl.c:49
:17  %k_load = load i32* %k_addr, align 4

ST_9: m_addr_6 (138)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:49
:18  %m_addr_6 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %tmp_53

ST_9: m_load_4 (139)  [2/2] 2.71ns  loc: sha256/src/sha256_impl.c:49
:19  %m_load_4 = load i32* %m_addr_6, align 4

ST_9: tmp11 (141)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:49
:21  %tmp11 = add i32 %tmp_48, %tmp_52

ST_9: tmp10 (142)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:49
:22  %tmp10 = add i32 %tmp11, %h1

ST_9: tmp_64 (155)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_67)
:35  %tmp_64 = xor i32 %c, %d

ST_9: tmp_65 (156)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_67)
:36  %tmp_65 = and i32 %b, %tmp_64

ST_9: tmp_66 (157)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_67)
:37  %tmp_66 = and i32 %c, %d

ST_9: tmp_67 (158)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:50 (out node of the LUT)
:38  %tmp_67 = xor i32 %tmp_65, %tmp_66

ST_9: ctx_state (164)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:61
:0  %ctx_state = add i32 %b, %ctx_state_0_read_1

ST_9: ctx_state_1 (165)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:62
:1  %ctx_state_1 = add i32 %c, %ctx_state_1_read_1

ST_9: ctx_state_2 (166)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:63
:2  %ctx_state_2 = add i32 %d, %ctx_state_2_read_1

ST_9: ctx_state_3 (167)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:64
:3  %ctx_state_3 = add i32 %d1, %ctx_state_3_read_1

ST_9: ctx_state_4 (168)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:65
:4  %ctx_state_4 = add i32 %f, %ctx_state_4_read_1

ST_9: ctx_state_5 (169)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:66
:5  %ctx_state_5 = add i32 %g, %ctx_state_5_read_1

ST_9: ctx_state_6 (170)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:67
:6  %ctx_state_6 = add i32 %h, %ctx_state_6_read_1

ST_9: ctx_state_7 (171)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:68
:7  %ctx_state_7 = add i32 %h1, %ctx_state_7_read_1

ST_9: mrv (172)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:8  %mrv = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %ctx_state, 0

ST_9: mrv_1 (173)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:9  %mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv, i32 %ctx_state_1, 1

ST_9: mrv_2 (174)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:10  %mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %ctx_state_2, 2

ST_9: mrv_3 (175)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:11  %mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %ctx_state_3, 3

ST_9: mrv_4 (176)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:12  %mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %ctx_state_4, 4

ST_9: mrv_5 (177)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:13  %mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %ctx_state_5, 5

ST_9: mrv_6 (178)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:14  %mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %ctx_state_6, 6

ST_9: mrv_7 (179)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:15  %mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %ctx_state_7, 7

ST_9: StgValue_163 (180)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:69
:16  ret { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7


 <State 10>: 6.65ns
ST_10: k_load (137)  [1/2] 2.39ns  loc: sha256/src/sha256_impl.c:49
:17  %k_load = load i32* %k_addr, align 4

ST_10: m_load_4 (139)  [1/2] 2.71ns  loc: sha256/src/sha256_impl.c:49
:19  %m_load_4 = load i32* %m_addr_6, align 4

ST_10: tmp9 (140)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:49
:20  %tmp9 = add i32 %k_load, %m_load_4

ST_10: t1 (143)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:49
:23  %t1 = add i32 %tmp10, %tmp9


 <State 11>: 3.94ns
ST_11: tmp_54 (144)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:24  %tmp_54 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %b, i32 2, i32 31)

ST_11: tmp_58 (145)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:58 (grouped into LUT with out node tmp_63)
:25  %tmp_58 = trunc i32 %b to i2

ST_11: tmp_56 (146)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:26  %tmp_56 = call i32 @_ssdm_op_BitConcatenate.i32.i2.i30(i2 %tmp_58, i30 %tmp_54)

ST_11: tmp_57 (147)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:27  %tmp_57 = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %b, i32 13, i32 31)

ST_11: tmp_61 (148)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:58 (grouped into LUT with out node tmp_63)
:28  %tmp_61 = trunc i32 %b to i13

ST_11: tmp_59 (149)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:29  %tmp_59 = call i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13 %tmp_61, i19 %tmp_57)

ST_11: tmp_60 (150)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:30  %tmp_60 = call i10 @_ssdm_op_PartSelect.i10.i32.i32.i32(i32 %b, i32 22, i32 31)

ST_11: tmp_68 (151)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:58 (grouped into LUT with out node tmp_63)
:31  %tmp_68 = trunc i32 %b to i22

ST_11: tmp_62 (152)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:32  %tmp_62 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %tmp_68, i10 %tmp_60)

ST_11: tmp12 (153)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:50 (grouped into LUT with out node tmp_63)
:33  %tmp12 = xor i32 %tmp_56, %tmp_59

ST_11: tmp_63 (154)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:50 (out node of the LUT)
:34  %tmp_63 = xor i32 %tmp12, %tmp_62

ST_11: e (159)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:54
:39  %e = add i32 %t1, %d1

ST_11: tmp13 (160)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:58
:40  %tmp13 = add i32 %tmp_67, %t1

ST_11: a (161)  [1/1] 1.97ns  loc: sha256/src/sha256_impl.c:58
:41  %a = add i32 %tmp13, %tmp_63

ST_11: StgValue_182 (162)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:48
:42  br label %.preheader1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i', sha256/src/sha256_impl.c:34) with incoming values : ('tmp_9', sha256/src/sha256_impl.c:34) [22]  (1.57 ns)

 <State 2>: 2.39ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256/src/sha256_impl.c:34) [23]  (0 ns)
	'or' operation ('tmp_1', sha256/src/sha256_impl.c:35) [33]  (0 ns)
	'getelementptr' operation ('data_addr_1', sha256/src/sha256_impl.c:35) [35]  (0 ns)
	'load' operation ('data_load_1', sha256/src/sha256_impl.c:35) on array 'data' [36]  (2.39 ns)

 <State 3>: 2.39ns
The critical path consists of the following:
	'load' operation ('data_load', sha256/src/sha256_impl.c:35) on array 'data' [31]  (2.39 ns)

 <State 4>: 5.1ns
The critical path consists of the following:
	'load' operation ('data_load_2', sha256/src/sha256_impl.c:35) on array 'data' [40]  (2.39 ns)
	'store' operation (sha256/src/sha256_impl.c:35) of variable 'tmp_s', sha256/src/sha256_impl.c:35 on array 'm', sha256/src/sha256_impl.c:32 [48]  (2.71 ns)

 <State 5>: 4.43ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256/src/sha256_impl.c:36) [54]  (0 ns)
	'add' operation ('tmp_21', sha256/src/sha256_impl.c:37) [73]  (1.72 ns)
	'getelementptr' operation ('m_addr_2', sha256/src/sha256_impl.c:37) [75]  (0 ns)
	'load' operation ('m_load_1', sha256/src/sha256_impl.c:37) on array 'm', sha256/src/sha256_impl.c:32 [76]  (2.71 ns)

 <State 6>: 4.43ns
The critical path consists of the following:
	'add' operation ('tmp_23', sha256/src/sha256_impl.c:37) [77]  (1.72 ns)
	'getelementptr' operation ('m_addr_3', sha256/src/sha256_impl.c:37) [79]  (0 ns)
	'load' operation ('m_load_2', sha256/src/sha256_impl.c:37) on array 'm', sha256/src/sha256_impl.c:32 [80]  (2.71 ns)

 <State 7>: 5.15ns
The critical path consists of the following:
	'load' operation ('m_load_2', sha256/src/sha256_impl.c:37) on array 'm', sha256/src/sha256_impl.c:32 [80]  (2.71 ns)
	'xor' operation ('tmp_33', sha256/src/sha256_impl.c:37) [90]  (0 ns)
	'add' operation ('tmp5', sha256/src/sha256_impl.c:37) [96]  (2.44 ns)

 <State 8>: 6.65ns
The critical path consists of the following:
	'add' operation ('tmp4', sha256/src/sha256_impl.c:37) [95]  (1.97 ns)
	'add' operation ('tmp_36', sha256/src/sha256_impl.c:37) [97]  (1.97 ns)
	'store' operation (sha256/src/sha256_impl.c:37) of variable 'tmp_36', sha256/src/sha256_impl.c:37 on array 'm', sha256/src/sha256_impl.c:32 [100]  (2.71 ns)

 <State 9>: 5.31ns
The critical path consists of the following:
	'phi' operation ('g') with incoming values : ('ctx_state_6_read_1') ('ctx_state_5_read_1') ('ctx_state_4_read_1') ('e', sha256/src/sha256_impl.c:54) [107]  (0 ns)
	'and' operation ('tmp_51', sha256/src/sha256_impl.c:49) [133]  (0 ns)
	'xor' operation ('tmp_52', sha256/src/sha256_impl.c:49) [134]  (1.37 ns)
	'add' operation ('tmp11', sha256/src/sha256_impl.c:49) [141]  (1.97 ns)
	'add' operation ('tmp10', sha256/src/sha256_impl.c:49) [142]  (1.97 ns)

 <State 10>: 6.65ns
The critical path consists of the following:
	'load' operation ('m_load_4', sha256/src/sha256_impl.c:49) on array 'm', sha256/src/sha256_impl.c:32 [139]  (2.71 ns)
	'add' operation ('tmp9', sha256/src/sha256_impl.c:49) [140]  (1.97 ns)
	'add' operation ('t1', sha256/src/sha256_impl.c:49) [143]  (1.97 ns)

 <State 11>: 3.94ns
The critical path consists of the following:
	'add' operation ('tmp13', sha256/src/sha256_impl.c:58) [160]  (1.97 ns)
	'add' operation ('a', sha256/src/sha256_impl.c:58) [161]  (1.97 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
