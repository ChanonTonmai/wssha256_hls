

================================================================
== Vivado HLS Report for 'sha256_final'
================================================================
* Date:           Tue Apr 11 14:24:22 2017

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        sha256
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      6.91|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |    ?|    ?|         1|          -|          -|     ?|    no    |
        |- Loop 2  |    ?|    ?|         1|          -|          -|     ?|    no    |
        |- Loop 3  |   56|   56|         1|          -|          -|    56|    no    |
        |- Loop 4  |   16|   16|         4|          -|          -|     4|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 14
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (!tmp)
	5  / (tmp)
2 --> 
	3  / (!icmp)
	2  / (icmp)
3 --> 
	4  / true
4 --> 
	4  / (!tmp & !tmp_70)
	6  / (tmp) | (tmp_70)
5 --> 
	5  / (!exitcond)
	4  / (exitcond)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / (!tmp_84)
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	11  / true
* FSM state operations: 

 <State 1>: 2.52ns
ST_1: p_read (15)  [1/1] 0.00ns
:0  %p_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read9)

ST_1: p_read_6 (16)  [1/1] 0.00ns
:1  %p_read_6 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read8)

ST_1: p_read_7 (17)  [1/1] 0.00ns
:2  %p_read_7 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read7)

ST_1: p_read_8 (18)  [1/1] 0.00ns
:3  %p_read_8 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read6)

ST_1: p_read_9 (19)  [1/1] 0.00ns
:4  %p_read_9 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read5)

ST_1: p_read48 (20)  [1/1] 0.00ns
:5  %p_read48 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read4)

ST_1: p_read27 (21)  [1/1] 0.00ns
:6  %p_read27 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read2)

ST_1: p_read16 (22)  [1/1] 0.00ns
:7  %p_read16 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read1)

ST_1: p_read35 (23)  [1/1] 0.00ns
:8  %p_read35 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read3)

ST_1: ctx_bitlen_0_read_1 (24)  [1/1] 0.00ns
:9  %ctx_bitlen_0_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_bitlen_0_read)

ST_1: ctx_datalen_read_2 (25)  [1/1] 0.00ns
:10  %ctx_datalen_read_2 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_datalen_read)

ST_1: tmp (26)  [1/1] 2.52ns  loc: sha256/src/sha256_impl.c:108
:11  %tmp = icmp ult i32 %ctx_datalen_read_2, 56

ST_1: tmp_s (27)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:109
:12  %tmp_s = zext i32 %ctx_datalen_read_2 to i64

ST_1: ctx_data_addr (28)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:109
:13  %ctx_data_addr = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %tmp_s

ST_1: StgValue_29 (29)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:109
:14  store i8 -128, i8* %ctx_data_addr, align 1

ST_1: StgValue_30 (30)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:108
:15  br i1 %tmp, label %.preheader3.preheader, label %.preheader.preheader

ST_1: StgValue_31 (32)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:114
.preheader.preheader:0  br label %.preheader

ST_1: StgValue_32 (69)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:109
.preheader3.preheader:0  br label %.preheader3


 <State 2>: 4.87ns
ST_2: i_1_in (34)  [1/1] 0.00ns
.preheader:0  %i_1_in = phi i32 [ %i_1, %2 ], [ %ctx_datalen_read_2, %.preheader.preheader ]

ST_2: i_1 (35)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:114
.preheader:1  %i_1 = add i32 %i_1_in, 1

ST_2: tmp_73 (36)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:115
.preheader:2  %tmp_73 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %i_1, i32 6, i32 31)

ST_2: icmp (37)  [1/1] 2.43ns  loc: sha256/src/sha256_impl.c:115
.preheader:3  %icmp = icmp eq i26 %tmp_73, 0

ST_2: StgValue_37 (38)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:115
.preheader:4  br i1 %icmp, label %2, label %3

ST_2: tmp_69 (40)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:116
:0  %tmp_69 = zext i32 %i_1 to i64

ST_2: ctx_data_addr_2 (41)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:116
:1  %ctx_data_addr_2 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %tmp_69

ST_2: StgValue_40 (42)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:116
:2  store i8 0, i8* %ctx_data_addr_2, align 1

ST_2: StgValue_41 (43)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:116
:3  br label %.preheader

ST_2: call_ret1 (45)  [2/2] 1.57ns  loc: sha256/src/sha256_impl.c:117
:0  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %p_read16, i32 %p_read27, i32 %p_read48, i32 %p_read_9, i32 %p_read_8, i32 %p_read_7, i32 %p_read_6, i32 %p_read, [64 x i8]* %ctx_data)


 <State 3>: 2.44ns
ST_3: call_ret1 (45)  [1/2] 2.44ns  loc: sha256/src/sha256_impl.c:117
:0  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %p_read16, i32 %p_read27, i32 %p_read48, i32 %p_read_9, i32 %p_read_8, i32 %p_read_7, i32 %p_read_6, i32 %p_read, [64 x i8]* %ctx_data)

ST_3: ctx_state_0_ret4 (46)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:1  %ctx_state_0_ret4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 0

ST_3: ctx_state_1_ret5 (47)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:2  %ctx_state_1_ret5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 1

ST_3: ctx_state_2_ret6 (48)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:3  %ctx_state_2_ret6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 2

ST_3: ctx_state_3_ret7 (49)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:4  %ctx_state_3_ret7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 3

ST_3: ctx_state_4_ret8 (50)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:5  %ctx_state_4_ret8 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 4

ST_3: ctx_state_5_ret9 (51)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:6  %ctx_state_5_ret9 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 5

ST_3: ctx_state_6_ret1 (52)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:7  %ctx_state_6_ret1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 6

ST_3: ctx_state_7_ret1 (53)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
:8  %ctx_state_7_ret1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 7

ST_3: StgValue_52 (54)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:118
:9  br label %4


 <State 4>: 4.35ns
ST_4: i_2 (56)  [1/1] 0.00ns
:0  %i_2 = phi i6 [ 0, %3 ], [ %i_5, %5 ]

ST_4: tmp_70 (57)  [1/1] 1.94ns  loc: sha256/src/sha256_impl.c:118
:1  %tmp_70 = icmp eq i6 %i_2, -8

ST_4: empty (58)  [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 56, i64 56, i64 56)

ST_4: i_5 (59)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:118
:3  %i_5 = add i6 %i_2, 1

ST_4: StgValue_57 (60)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:118
:4  br i1 %tmp_70, label %.loopexit.loopexit, label %5

ST_4: tmp_71 (62)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:119
:0  %tmp_71 = zext i6 %i_2 to i64

ST_4: ctx_data_addr_6 (63)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:119
:1  %ctx_data_addr_6 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %tmp_71

ST_4: StgValue_60 (64)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:119
:2  store i8 0, i8* %ctx_data_addr_6, align 1

ST_4: StgValue_61 (65)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:118
:3  br label %4

ST_4: StgValue_62 (67)  [1/1] 1.57ns
.loopexit.loopexit:0  br label %.loopexit

ST_4: tmp_81 (91)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:125
.loopexit:8  %tmp_81 = shl i32 %ctx_datalen_read_2, 3

ST_4: tmp_72 (92)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:125 (grouped into LUT with out node tmp_74)
.loopexit:9  %tmp_72 = xor i32 %tmp_81, -1

ST_4: tmp_74 (93)  [1/1] 2.52ns  loc: sha256/src/sha256_impl.c:125 (out node of the LUT)
.loopexit:10  %tmp_74 = icmp ugt i32 %ctx_bitlen_0_read_1, %tmp_72

ST_4: tmp_75 (94)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:125
.loopexit:11  %tmp_75 = add i32 1, %p_read35

ST_4: tmp_102_read3 (95)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:125
.loopexit:12  %tmp_102_read3 = select i1 %tmp_74, i32 %tmp_75, i32 %p_read35

ST_4: tmp_89 (96)  [1/1] 0.00ns
.loopexit:13  %tmp_89 = trunc i32 %ctx_datalen_read_2 to i5

ST_4: tmp_16 (97)  [1/1] 0.00ns
.loopexit:14  %tmp_16 = call i8 @_ssdm_op_BitConcatenate.i8.i5.i3(i5 %tmp_89, i3 0)

ST_4: tmp_92 (98)  [1/1] 0.00ns
.loopexit:15  %tmp_92 = trunc i32 %ctx_bitlen_0_read_1 to i8

ST_4: tmp_96 (99)  [1/1] 0.00ns
.loopexit:16  %tmp_96 = trunc i32 %ctx_datalen_read_2 to i13

ST_4: tmp_14 (100)  [1/1] 0.00ns
.loopexit:17  %tmp_14 = call i16 @_ssdm_op_BitConcatenate.i16.i13.i3(i13 %tmp_96, i3 0)

ST_4: tmp_100 (101)  [1/1] 0.00ns
.loopexit:18  %tmp_100 = trunc i32 %ctx_bitlen_0_read_1 to i16

ST_4: tmp_103 (102)  [1/1] 0.00ns
.loopexit:19  %tmp_103 = trunc i32 %ctx_datalen_read_2 to i21

ST_4: tmp_18 (103)  [1/1] 0.00ns
.loopexit:20  %tmp_18 = call i24 @_ssdm_op_BitConcatenate.i24.i21.i3(i21 %tmp_103, i3 0)

ST_4: tmp_107 (104)  [1/1] 0.00ns
.loopexit:21  %tmp_107 = trunc i32 %ctx_bitlen_0_read_1 to i24

ST_4: ctx_bitlen (105)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:125
.loopexit:22  %ctx_bitlen = add i32 %ctx_bitlen_0_read_1, %tmp_81

ST_4: ctx_bitlen_cast3 (106)  [1/1] 2.20ns  loc: sha256/src/sha256_impl.c:126
.loopexit:23  %ctx_bitlen_cast3 = add i24 %tmp_18, %tmp_107

ST_4: ctx_bitlen_cast (107)  [1/1] 1.96ns  loc: sha256/src/sha256_impl.c:126
.loopexit:24  %ctx_bitlen_cast = add i16 %tmp_14, %tmp_100

ST_4: tmp_76 (108)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:126
.loopexit:25  %tmp_76 = add i8 %tmp_92, %tmp_16

ST_4: ctx_data_addr_3 (109)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:126
.loopexit:26  %ctx_data_addr_3 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 63

ST_4: StgValue_82 (110)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:126
.loopexit:27  store i8 %tmp_76, i8* %ctx_data_addr_3, align 1

ST_4: tmp_77 (111)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:127
.loopexit:28  %tmp_77 = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %ctx_bitlen_cast, i32 8, i32 15)

ST_4: ctx_data_addr_4 (112)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:127
.loopexit:29  %ctx_data_addr_4 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 62

ST_4: StgValue_85 (113)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:127
.loopexit:30  store i8 %tmp_77, i8* %ctx_data_addr_4, align 1

ST_4: tmp_78 (114)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:128
.loopexit:31  %tmp_78 = call i8 @_ssdm_op_PartSelect.i8.i24.i32.i32(i24 %ctx_bitlen_cast3, i32 16, i32 23)

ST_4: tmp_79 (117)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:129
.loopexit:34  %tmp_79 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %ctx_bitlen, i32 24, i32 31)

ST_4: tmp_111 (120)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:130
.loopexit:37  %tmp_111 = trunc i32 %tmp_102_read3 to i8

ST_4: tmp_80 (123)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:131
.loopexit:40  %tmp_80 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_102_read3, i32 8, i32 15)

ST_4: tmp_82 (126)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:132
.loopexit:43  %tmp_82 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_102_read3, i32 16, i32 23)

ST_4: tmp_83 (129)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:133
.loopexit:46  %tmp_83 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_102_read3, i32 24, i32 31)


 <State 5>: 4.83ns
ST_5: i_0_in (71)  [1/1] 0.00ns
.preheader3:0  %i_0_in = phi i32 [ %i, %1 ], [ %ctx_datalen_read_2, %.preheader3.preheader ]

ST_5: i (72)  [1/1] 2.44ns  loc: sha256/src/sha256_impl.c:109
.preheader3:1  %i = add i32 %i_0_in, 1

ST_5: exitcond (73)  [1/1] 2.52ns  loc: sha256/src/sha256_impl.c:110
.preheader3:2  %exitcond = icmp eq i32 %i_0_in, 55

ST_5: StgValue_95 (74)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:110
.preheader3:3  br i1 %exitcond, label %.loopexit.loopexit15, label %1

ST_5: tmp_68 (76)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:111
:0  %tmp_68 = zext i32 %i to i64

ST_5: ctx_data_addr_1 (77)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:111
:1  %ctx_data_addr_1 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %tmp_68

ST_5: StgValue_98 (78)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:111
:2  store i8 0, i8* %ctx_data_addr_1, align 1

ST_5: StgValue_99 (79)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:111
:3  br label %.preheader3

ST_5: StgValue_100 (81)  [1/1] 1.57ns
.loopexit.loopexit15:0  br label %.loopexit


 <State 6>: 2.39ns
ST_6: ctx_state (83)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:0  %ctx_state = phi i32 [ %ctx_state_0_ret4, %.loopexit.loopexit ], [ %p_read16, %.loopexit.loopexit15 ]

ST_6: ctx_state_1 (84)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:1  %ctx_state_1 = phi i32 [ %ctx_state_1_ret5, %.loopexit.loopexit ], [ %p_read27, %.loopexit.loopexit15 ]

ST_6: ctx_state_2 (85)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:2  %ctx_state_2 = phi i32 [ %ctx_state_2_ret6, %.loopexit.loopexit ], [ %p_read48, %.loopexit.loopexit15 ]

ST_6: ctx_state_3 (86)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:3  %ctx_state_3 = phi i32 [ %ctx_state_3_ret7, %.loopexit.loopexit ], [ %p_read_9, %.loopexit.loopexit15 ]

ST_6: ctx_state_4 (87)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:4  %ctx_state_4 = phi i32 [ %ctx_state_4_ret8, %.loopexit.loopexit ], [ %p_read_8, %.loopexit.loopexit15 ]

ST_6: ctx_state_5 (88)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:5  %ctx_state_5 = phi i32 [ %ctx_state_5_ret9, %.loopexit.loopexit ], [ %p_read_7, %.loopexit.loopexit15 ]

ST_6: ctx_state_6 (89)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:6  %ctx_state_6 = phi i32 [ %ctx_state_6_ret1, %.loopexit.loopexit ], [ %p_read_6, %.loopexit.loopexit15 ]

ST_6: ctx_state_7 (90)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:117
.loopexit:7  %ctx_state_7 = phi i32 [ %ctx_state_7_ret1, %.loopexit.loopexit ], [ %p_read, %.loopexit.loopexit15 ]

ST_6: ctx_data_addr_5 (115)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:128
.loopexit:32  %ctx_data_addr_5 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 61

ST_6: StgValue_110 (116)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:128
.loopexit:33  store i8 %tmp_78, i8* %ctx_data_addr_5, align 1

ST_6: ctx_data_addr_7 (118)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:129
.loopexit:35  %ctx_data_addr_7 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 60

ST_6: StgValue_112 (119)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:129
.loopexit:36  store i8 %tmp_79, i8* %ctx_data_addr_7, align 1


 <State 7>: 2.39ns
ST_7: ctx_data_addr_8 (121)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:130
.loopexit:38  %ctx_data_addr_8 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 59

ST_7: StgValue_114 (122)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:130
.loopexit:39  store i8 %tmp_111, i8* %ctx_data_addr_8, align 1

ST_7: ctx_data_addr_9 (124)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:131
.loopexit:41  %ctx_data_addr_9 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 58

ST_7: StgValue_116 (125)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:131
.loopexit:42  store i8 %tmp_80, i8* %ctx_data_addr_9, align 1


 <State 8>: 2.39ns
ST_8: ctx_data_addr_10 (127)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:132
.loopexit:44  %ctx_data_addr_10 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 57

ST_8: StgValue_118 (128)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:132
.loopexit:45  store i8 %tmp_82, i8* %ctx_data_addr_10, align 1

ST_8: ctx_data_addr_11 (130)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:133
.loopexit:47  %ctx_data_addr_11 = getelementptr [64 x i8]* %ctx_data, i64 0, i64 56

ST_8: StgValue_120 (131)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:133
.loopexit:48  store i8 %tmp_83, i8* %ctx_data_addr_11, align 1


 <State 9>: 1.57ns
ST_9: call_ret (132)  [2/2] 1.57ns  loc: sha256/src/sha256_impl.c:134
.loopexit:49  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state, i32 %ctx_state_1, i32 %ctx_state_2, i32 %ctx_state_3, i32 %ctx_state_4, i32 %ctx_state_5, i32 %ctx_state_6, i32 %ctx_state_7, [64 x i8]* %ctx_data)


 <State 10>: 2.44ns
ST_10: call_ret (132)  [1/2] 2.44ns  loc: sha256/src/sha256_impl.c:134
.loopexit:49  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state, i32 %ctx_state_1, i32 %ctx_state_2, i32 %ctx_state_3, i32 %ctx_state_4, i32 %ctx_state_5, i32 %ctx_state_6, i32 %ctx_state_7, [64 x i8]* %ctx_data)

ST_10: ctx_state_0_ret (133)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:50  %ctx_state_0_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0

ST_10: ctx_state_1_ret (134)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:51  %ctx_state_1_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1

ST_10: ctx_state_2_ret (135)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:52  %ctx_state_2_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2

ST_10: ctx_state_3_ret (136)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:53  %ctx_state_3_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3

ST_10: ctx_state_4_ret (137)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:54  %ctx_state_4_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4

ST_10: ctx_state_5_ret (138)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:55  %ctx_state_5_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5

ST_10: ctx_state_6_ret (139)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:56  %ctx_state_6_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6

ST_10: ctx_state_7_ret (140)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:134
.loopexit:57  %ctx_state_7_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7

ST_10: StgValue_131 (141)  [1/1] 1.57ns  loc: sha256/src/sha256_impl.c:138
.loopexit:58  br label %6


 <State 11>: 6.91ns
ST_11: i_3 (143)  [1/1] 0.00ns
:0  %i_3 = phi i3 [ 0, %.loopexit ], [ %i_6, %7 ]

ST_11: i_3_cast1 (144)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:138
:1  %i_3_cast1 = zext i3 %i_3 to i5

ST_11: tmp_84 (145)  [1/1] 1.62ns  loc: sha256/src/sha256_impl.c:138
:2  %tmp_84 = icmp eq i3 %i_3, -4

ST_11: empty_11 (146)  [1/1] 0.00ns
:3  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)

ST_11: i_6 (147)  [1/1] 0.80ns  loc: sha256/src/sha256_impl.c:138
:4  %i_6 = add i3 %i_3, 1

ST_11: StgValue_137 (148)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:138
:5  br i1 %tmp_84, label %8, label %7

ST_11: tmp_114 (150)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:138
:0  %tmp_114 = trunc i3 %i_3 to i2

ST_11: tmp_85 (151)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:139
:1  %tmp_85 = call i5 @_ssdm_op_BitConcatenate.i5.i2.i3(i2 %tmp_114, i3 0)

ST_11: tmp_86 (152)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:139
:2  %tmp_86 = sub i5 -8, %tmp_85

ST_11: tmp_109_cast (153)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:139
:3  %tmp_109_cast = zext i5 %tmp_86 to i32

ST_11: tmp_87 (154)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:139
:4  %tmp_87 = lshr i32 %ctx_state_0_ret, %tmp_109_cast

ST_11: tmp_116 (155)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:139
:5  %tmp_116 = trunc i32 %tmp_87 to i8

ST_11: tmp_90 (159)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:140
:9  %tmp_90 = lshr i32 %ctx_state_1_ret, %tmp_109_cast

ST_11: tmp_117 (160)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:140
:10  %tmp_117 = trunc i32 %tmp_90 to i8

ST_11: tmp_91 (161)  [1/1] 1.37ns  loc: sha256/src/sha256_impl.c:140
:11  %tmp_91 = xor i3 %i_3, -4

ST_11: tmp_93 (162)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:140
:12  %tmp_93 = zext i3 %tmp_91 to i64

ST_11: hash_addr_1 (163)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:140
:13  %hash_addr_1 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_93

ST_11: StgValue_149 (164)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:140
:14  store i8 %tmp_117, i8* %hash_addr_1, align 1

ST_11: tmp_94 (165)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:141
:15  %tmp_94 = lshr i32 %ctx_state_2_ret, %tmp_109_cast

ST_11: tmp_118 (166)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:141
:16  %tmp_118 = trunc i32 %tmp_94 to i8

ST_11: tmp_95 (167)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:141
:17  %tmp_95 = call i4 @_ssdm_op_BitConcatenate.i4.i1.i3(i1 true, i3 %i_3)

ST_11: tmp_97 (168)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:141
:18  %tmp_97 = zext i4 %tmp_95 to i64

ST_11: hash_addr_2 (169)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:141
:19  %hash_addr_2 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_97

ST_11: StgValue_155 (170)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:141
:20  store i8 %tmp_118, i8* %hash_addr_2, align 1

ST_11: tmp_98 (171)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:142
:21  %tmp_98 = lshr i32 %ctx_state_3_ret, %tmp_109_cast

ST_11: tmp_119 (172)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:142
:22  %tmp_119 = trunc i32 %tmp_98 to i8

ST_11: tmp_101 (177)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:143
:27  %tmp_101 = lshr i32 %ctx_state_4_ret, %tmp_109_cast

ST_11: tmp_120 (178)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:143
:28  %tmp_120 = trunc i32 %tmp_101 to i8

ST_11: tmp_105 (183)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:144
:33  %tmp_105 = lshr i32 %ctx_state_5_ret, %tmp_109_cast

ST_11: tmp_121 (184)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:144
:34  %tmp_121 = trunc i32 %tmp_105 to i8

ST_11: tmp_109 (189)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:145
:39  %tmp_109 = lshr i32 %ctx_state_6_ret, %tmp_109_cast

ST_11: tmp_122 (190)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:145
:40  %tmp_122 = trunc i32 %tmp_109 to i8

ST_11: tmp_112 (195)  [1/1] 2.80ns  loc: sha256/src/sha256_impl.c:146
:45  %tmp_112 = lshr i32 %ctx_state_7_ret, %tmp_109_cast

ST_11: tmp_123 (196)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:146
:46  %tmp_123 = trunc i32 %tmp_112 to i8

ST_11: StgValue_166 (203)  [1/1] 0.00ns
:0  ret void


 <State 12>: 2.39ns
ST_12: tmp_88 (156)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:139
:6  %tmp_88 = zext i3 %i_3 to i64

ST_12: hash_addr (157)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:139
:7  %hash_addr = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_88

ST_12: StgValue_169 (158)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:139
:8  store i8 %tmp_116, i8* %hash_addr, align 1

ST_12: tmp_123_cast8 (173)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:142
:23  %tmp_123_cast8 = sext i3 %tmp_91 to i4

ST_12: tmp_99 (174)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:142
:24  %tmp_99 = zext i4 %tmp_123_cast8 to i64

ST_12: hash_addr_3 (175)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:142
:25  %hash_addr_3 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_99

ST_12: StgValue_173 (176)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:142
:26  store i8 %tmp_119, i8* %hash_addr_3, align 1


 <State 13>: 4.11ns
ST_13: tmp_102 (179)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:143
:29  %tmp_102 = call i5 @_ssdm_op_BitConcatenate.i5.i2.i3(i2 -2, i3 %i_3)

ST_13: tmp_104 (180)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:143
:30  %tmp_104 = zext i5 %tmp_102 to i64

ST_13: hash_addr_4 (181)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:143
:31  %hash_addr_4 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_104

ST_13: StgValue_177 (182)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:143
:32  store i8 %tmp_120, i8* %hash_addr_4, align 1

ST_13: tmp_106 (185)  [1/1] 1.72ns  loc: sha256/src/sha256_impl.c:144
:35  %tmp_106 = add i5 -12, %i_3_cast1

ST_13: tmp_108 (186)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:144
:36  %tmp_108 = zext i5 %tmp_106 to i64

ST_13: hash_addr_5 (187)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:144
:37  %hash_addr_5 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_108

ST_13: StgValue_181 (188)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:144
:38  store i8 %tmp_121, i8* %hash_addr_5, align 1


 <State 14>: 2.39ns
ST_14: tmp_135_cast7 (191)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:145
:41  %tmp_135_cast7 = sext i4 %tmp_95 to i5

ST_14: tmp_110 (192)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:145
:42  %tmp_110 = zext i5 %tmp_135_cast7 to i64

ST_14: hash_addr_6 (193)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:145
:43  %hash_addr_6 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_110

ST_14: StgValue_185 (194)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:145
:44  store i8 %tmp_122, i8* %hash_addr_6, align 1

ST_14: tmp_139_cast6 (197)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:146
:47  %tmp_139_cast6 = sext i3 %tmp_91 to i5

ST_14: tmp_113 (198)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:146
:48  %tmp_113 = zext i5 %tmp_139_cast6 to i64

ST_14: hash_addr_7 (199)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:146
:49  %hash_addr_7 = getelementptr [64 x i8]* %hash, i64 0, i64 %tmp_113

ST_14: StgValue_189 (200)  [1/1] 2.39ns  loc: sha256/src/sha256_impl.c:146
:50  store i8 %tmp_123, i8* %hash_addr_7, align 1

ST_14: StgValue_190 (201)  [1/1] 0.00ns  loc: sha256/src/sha256_impl.c:138
:51  br label %6



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 2.52ns
The critical path consists of the following:
	wire read on port 'ctx_datalen_read' [25]  (0 ns)
	'icmp' operation ('tmp', sha256/src/sha256_impl.c:108) [26]  (2.52 ns)

 <State 2>: 4.87ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('ctx.datalen') ('i', sha256/src/sha256_impl.c:114) [34]  (0 ns)
	'add' operation ('i', sha256/src/sha256_impl.c:114) [35]  (2.44 ns)
	'icmp' operation ('icmp', sha256/src/sha256_impl.c:115) [37]  (2.43 ns)

 <State 3>: 2.44ns
The critical path consists of the following:
	'call' operation ('call_ret1', sha256/src/sha256_impl.c:117) to 'sha256_transform' [45]  (2.44 ns)

 <State 4>: 4.35ns
The critical path consists of the following:
	'add' operation ('ctx_bitlen_cast', sha256/src/sha256_impl.c:126) [107]  (1.96 ns)
	'store' operation (sha256/src/sha256_impl.c:127) of variable 'tmp_77', sha256/src/sha256_impl.c:127 on array 'ctx_data' [113]  (2.39 ns)

 <State 5>: 4.83ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('ctx.datalen') ('i', sha256/src/sha256_impl.c:109) [71]  (0 ns)
	'add' operation ('i', sha256/src/sha256_impl.c:109) [72]  (2.44 ns)
	'getelementptr' operation ('ctx_data_addr_1', sha256/src/sha256_impl.c:111) [77]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:111) of constant 0 on array 'ctx_data' [78]  (2.39 ns)

 <State 6>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('ctx_data_addr_5', sha256/src/sha256_impl.c:128) [115]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:128) of variable 'tmp_78', sha256/src/sha256_impl.c:128 on array 'ctx_data' [116]  (2.39 ns)

 <State 7>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('ctx_data_addr_8', sha256/src/sha256_impl.c:130) [121]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:130) of variable 'tmp_111', sha256/src/sha256_impl.c:130 on array 'ctx_data' [122]  (2.39 ns)

 <State 8>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('ctx_data_addr_10', sha256/src/sha256_impl.c:132) [127]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:132) of variable 'tmp_82', sha256/src/sha256_impl.c:132 on array 'ctx_data' [128]  (2.39 ns)

 <State 9>: 1.57ns
The critical path consists of the following:
	'call' operation ('call_ret', sha256/src/sha256_impl.c:134) to 'sha256_transform' [132]  (1.57 ns)

 <State 10>: 2.44ns
The critical path consists of the following:
	'call' operation ('call_ret', sha256/src/sha256_impl.c:134) to 'sha256_transform' [132]  (2.44 ns)

 <State 11>: 6.91ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256/src/sha256_impl.c:138) [143]  (0 ns)
	'sub' operation ('tmp_86', sha256/src/sha256_impl.c:139) [152]  (1.72 ns)
	'lshr' operation ('tmp_90', sha256/src/sha256_impl.c:140) [159]  (2.8 ns)
	'store' operation (sha256/src/sha256_impl.c:140) of variable 'tmp_117', sha256/src/sha256_impl.c:140 on array 'hash' [164]  (2.39 ns)

 <State 12>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('hash_addr', sha256/src/sha256_impl.c:139) [157]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:139) of variable 'tmp_116', sha256/src/sha256_impl.c:139 on array 'hash' [158]  (2.39 ns)

 <State 13>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_106', sha256/src/sha256_impl.c:144) [185]  (1.72 ns)
	'getelementptr' operation ('hash_addr_5', sha256/src/sha256_impl.c:144) [187]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:144) of variable 'tmp_121', sha256/src/sha256_impl.c:144 on array 'hash' [188]  (2.39 ns)

 <State 14>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('hash_addr_6', sha256/src/sha256_impl.c:145) [193]  (0 ns)
	'store' operation (sha256/src/sha256_impl.c:145) of variable 'tmp_122', sha256/src/sha256_impl.c:145 on array 'hash' [194]  (2.39 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
